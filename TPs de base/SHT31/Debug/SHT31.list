
SHT31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c8c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e58  08003e58  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e58  08003e58  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e58  08003e58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08003ed0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003ed0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c806  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc0  00000000  00000000  0002c89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002e560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001646e  00000000  00000000  0002f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d061  00000000  00000000  00045c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a35  00000000  00000000  00052c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da6b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a94  00000000  00000000  000da708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003db0 	.word	0x08003db0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003db0 	.word	0x08003db0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_frsub>:
 800018c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000190:	e002      	b.n	8000198 <__addsf3>
 8000192:	bf00      	nop

08000194 <__aeabi_fsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000198 <__addsf3>:
 8000198:	0042      	lsls	r2, r0, #1
 800019a:	bf1f      	itttt	ne
 800019c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001a0:	ea92 0f03 	teqne	r2, r3
 80001a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001ac:	d06a      	beq.n	8000284 <__addsf3+0xec>
 80001ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001b6:	bfc1      	itttt	gt
 80001b8:	18d2      	addgt	r2, r2, r3
 80001ba:	4041      	eorgt	r1, r0
 80001bc:	4048      	eorgt	r0, r1
 80001be:	4041      	eorgt	r1, r0
 80001c0:	bfb8      	it	lt
 80001c2:	425b      	neglt	r3, r3
 80001c4:	2b19      	cmp	r3, #25
 80001c6:	bf88      	it	hi
 80001c8:	4770      	bxhi	lr
 80001ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4240      	negne	r0, r0
 80001da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001e6:	bf18      	it	ne
 80001e8:	4249      	negne	r1, r1
 80001ea:	ea92 0f03 	teq	r2, r3
 80001ee:	d03f      	beq.n	8000270 <__addsf3+0xd8>
 80001f0:	f1a2 0201 	sub.w	r2, r2, #1
 80001f4:	fa41 fc03 	asr.w	ip, r1, r3
 80001f8:	eb10 000c 	adds.w	r0, r0, ip
 80001fc:	f1c3 0320 	rsb	r3, r3, #32
 8000200:	fa01 f103 	lsl.w	r1, r1, r3
 8000204:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000208:	d502      	bpl.n	8000210 <__addsf3+0x78>
 800020a:	4249      	negs	r1, r1
 800020c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000210:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000214:	d313      	bcc.n	800023e <__addsf3+0xa6>
 8000216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800021a:	d306      	bcc.n	800022a <__addsf3+0x92>
 800021c:	0840      	lsrs	r0, r0, #1
 800021e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000222:	f102 0201 	add.w	r2, r2, #1
 8000226:	2afe      	cmp	r2, #254	; 0xfe
 8000228:	d251      	bcs.n	80002ce <__addsf3+0x136>
 800022a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800022e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000232:	bf08      	it	eq
 8000234:	f020 0001 	biceq.w	r0, r0, #1
 8000238:	ea40 0003 	orr.w	r0, r0, r3
 800023c:	4770      	bx	lr
 800023e:	0049      	lsls	r1, r1, #1
 8000240:	eb40 0000 	adc.w	r0, r0, r0
 8000244:	3a01      	subs	r2, #1
 8000246:	bf28      	it	cs
 8000248:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800024c:	d2ed      	bcs.n	800022a <__addsf3+0x92>
 800024e:	fab0 fc80 	clz	ip, r0
 8000252:	f1ac 0c08 	sub.w	ip, ip, #8
 8000256:	ebb2 020c 	subs.w	r2, r2, ip
 800025a:	fa00 f00c 	lsl.w	r0, r0, ip
 800025e:	bfaa      	itet	ge
 8000260:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000264:	4252      	neglt	r2, r2
 8000266:	4318      	orrge	r0, r3
 8000268:	bfbc      	itt	lt
 800026a:	40d0      	lsrlt	r0, r2
 800026c:	4318      	orrlt	r0, r3
 800026e:	4770      	bx	lr
 8000270:	f092 0f00 	teq	r2, #0
 8000274:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000278:	bf06      	itte	eq
 800027a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800027e:	3201      	addeq	r2, #1
 8000280:	3b01      	subne	r3, #1
 8000282:	e7b5      	b.n	80001f0 <__addsf3+0x58>
 8000284:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000288:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800028c:	bf18      	it	ne
 800028e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000292:	d021      	beq.n	80002d8 <__addsf3+0x140>
 8000294:	ea92 0f03 	teq	r2, r3
 8000298:	d004      	beq.n	80002a4 <__addsf3+0x10c>
 800029a:	f092 0f00 	teq	r2, #0
 800029e:	bf08      	it	eq
 80002a0:	4608      	moveq	r0, r1
 80002a2:	4770      	bx	lr
 80002a4:	ea90 0f01 	teq	r0, r1
 80002a8:	bf1c      	itt	ne
 80002aa:	2000      	movne	r0, #0
 80002ac:	4770      	bxne	lr
 80002ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002b2:	d104      	bne.n	80002be <__addsf3+0x126>
 80002b4:	0040      	lsls	r0, r0, #1
 80002b6:	bf28      	it	cs
 80002b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002bc:	4770      	bx	lr
 80002be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002c2:	bf3c      	itt	cc
 80002c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002c8:	4770      	bxcc	lr
 80002ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d6:	4770      	bx	lr
 80002d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002dc:	bf16      	itet	ne
 80002de:	4608      	movne	r0, r1
 80002e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e4:	4601      	movne	r1, r0
 80002e6:	0242      	lsls	r2, r0, #9
 80002e8:	bf06      	itte	eq
 80002ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ee:	ea90 0f01 	teqeq	r0, r1
 80002f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_ui2f>:
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e004      	b.n	8000308 <__aeabi_i2f+0x8>
 80002fe:	bf00      	nop

08000300 <__aeabi_i2f>:
 8000300:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000304:	bf48      	it	mi
 8000306:	4240      	negmi	r0, r0
 8000308:	ea5f 0c00 	movs.w	ip, r0
 800030c:	bf08      	it	eq
 800030e:	4770      	bxeq	lr
 8000310:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000314:	4601      	mov	r1, r0
 8000316:	f04f 0000 	mov.w	r0, #0
 800031a:	e01c      	b.n	8000356 <__aeabi_l2f+0x2a>

0800031c <__aeabi_ul2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f04f 0300 	mov.w	r3, #0
 8000328:	e00a      	b.n	8000340 <__aeabi_l2f+0x14>
 800032a:	bf00      	nop

0800032c <__aeabi_l2f>:
 800032c:	ea50 0201 	orrs.w	r2, r0, r1
 8000330:	bf08      	it	eq
 8000332:	4770      	bxeq	lr
 8000334:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000338:	d502      	bpl.n	8000340 <__aeabi_l2f+0x14>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	ea5f 0c01 	movs.w	ip, r1
 8000344:	bf02      	ittt	eq
 8000346:	4684      	moveq	ip, r0
 8000348:	4601      	moveq	r1, r0
 800034a:	2000      	moveq	r0, #0
 800034c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000350:	bf08      	it	eq
 8000352:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000356:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800035a:	fabc f28c 	clz	r2, ip
 800035e:	3a08      	subs	r2, #8
 8000360:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000364:	db10      	blt.n	8000388 <__aeabi_l2f+0x5c>
 8000366:	fa01 fc02 	lsl.w	ip, r1, r2
 800036a:	4463      	add	r3, ip
 800036c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000370:	f1c2 0220 	rsb	r2, r2, #32
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000378:	fa20 f202 	lsr.w	r2, r0, r2
 800037c:	eb43 0002 	adc.w	r0, r3, r2
 8000380:	bf08      	it	eq
 8000382:	f020 0001 	biceq.w	r0, r0, #1
 8000386:	4770      	bx	lr
 8000388:	f102 0220 	add.w	r2, r2, #32
 800038c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000390:	f1c2 0220 	rsb	r2, r2, #32
 8000394:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000398:	fa21 f202 	lsr.w	r2, r1, r2
 800039c:	eb43 0002 	adc.w	r0, r3, r2
 80003a0:	bf08      	it	eq
 80003a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003a6:	4770      	bx	lr

080003a8 <__aeabi_fmul>:
 80003a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b0:	bf1e      	ittt	ne
 80003b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b6:	ea92 0f0c 	teqne	r2, ip
 80003ba:	ea93 0f0c 	teqne	r3, ip
 80003be:	d06f      	beq.n	80004a0 <__aeabi_fmul+0xf8>
 80003c0:	441a      	add	r2, r3
 80003c2:	ea80 0c01 	eor.w	ip, r0, r1
 80003c6:	0240      	lsls	r0, r0, #9
 80003c8:	bf18      	it	ne
 80003ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ce:	d01e      	beq.n	800040e <__aeabi_fmul+0x66>
 80003d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003dc:	fba0 3101 	umull	r3, r1, r0, r1
 80003e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e8:	bf3e      	ittt	cc
 80003ea:	0049      	lslcc	r1, r1, #1
 80003ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f0:	005b      	lslcc	r3, r3, #1
 80003f2:	ea40 0001 	orr.w	r0, r0, r1
 80003f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003fa:	2afd      	cmp	r2, #253	; 0xfd
 80003fc:	d81d      	bhi.n	800043a <__aeabi_fmul+0x92>
 80003fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000402:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000406:	bf08      	it	eq
 8000408:	f020 0001 	biceq.w	r0, r0, #1
 800040c:	4770      	bx	lr
 800040e:	f090 0f00 	teq	r0, #0
 8000412:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000416:	bf08      	it	eq
 8000418:	0249      	lsleq	r1, r1, #9
 800041a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000422:	3a7f      	subs	r2, #127	; 0x7f
 8000424:	bfc2      	ittt	gt
 8000426:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800042a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042e:	4770      	bxgt	lr
 8000430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	3a01      	subs	r2, #1
 800043a:	dc5d      	bgt.n	80004f8 <__aeabi_fmul+0x150>
 800043c:	f112 0f19 	cmn.w	r2, #25
 8000440:	bfdc      	itt	le
 8000442:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000446:	4770      	bxle	lr
 8000448:	f1c2 0200 	rsb	r2, r2, #0
 800044c:	0041      	lsls	r1, r0, #1
 800044e:	fa21 f102 	lsr.w	r1, r1, r2
 8000452:	f1c2 0220 	rsb	r2, r2, #32
 8000456:	fa00 fc02 	lsl.w	ip, r0, r2
 800045a:	ea5f 0031 	movs.w	r0, r1, rrx
 800045e:	f140 0000 	adc.w	r0, r0, #0
 8000462:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000466:	bf08      	it	eq
 8000468:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046c:	4770      	bx	lr
 800046e:	f092 0f00 	teq	r2, #0
 8000472:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0040      	lsleq	r0, r0, #1
 800047a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047e:	3a01      	subeq	r2, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xce>
 8000482:	ea40 000c 	orr.w	r0, r0, ip
 8000486:	f093 0f00 	teq	r3, #0
 800048a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048e:	bf02      	ittt	eq
 8000490:	0049      	lsleq	r1, r1, #1
 8000492:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000496:	3b01      	subeq	r3, #1
 8000498:	d0f9      	beq.n	800048e <__aeabi_fmul+0xe6>
 800049a:	ea41 010c 	orr.w	r1, r1, ip
 800049e:	e78f      	b.n	80003c0 <__aeabi_fmul+0x18>
 80004a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a4:	ea92 0f0c 	teq	r2, ip
 80004a8:	bf18      	it	ne
 80004aa:	ea93 0f0c 	teqne	r3, ip
 80004ae:	d00a      	beq.n	80004c6 <__aeabi_fmul+0x11e>
 80004b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b4:	bf18      	it	ne
 80004b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ba:	d1d8      	bne.n	800046e <__aeabi_fmul+0xc6>
 80004bc:	ea80 0001 	eor.w	r0, r0, r1
 80004c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c4:	4770      	bx	lr
 80004c6:	f090 0f00 	teq	r0, #0
 80004ca:	bf17      	itett	ne
 80004cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004d0:	4608      	moveq	r0, r1
 80004d2:	f091 0f00 	teqne	r1, #0
 80004d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004da:	d014      	beq.n	8000506 <__aeabi_fmul+0x15e>
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	d101      	bne.n	80004e6 <__aeabi_fmul+0x13e>
 80004e2:	0242      	lsls	r2, r0, #9
 80004e4:	d10f      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004e6:	ea93 0f0c 	teq	r3, ip
 80004ea:	d103      	bne.n	80004f4 <__aeabi_fmul+0x14c>
 80004ec:	024b      	lsls	r3, r1, #9
 80004ee:	bf18      	it	ne
 80004f0:	4608      	movne	r0, r1
 80004f2:	d108      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000504:	4770      	bx	lr
 8000506:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050e:	4770      	bx	lr

08000510 <__aeabi_fdiv>:
 8000510:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000514:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000518:	bf1e      	ittt	ne
 800051a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800051e:	ea92 0f0c 	teqne	r2, ip
 8000522:	ea93 0f0c 	teqne	r3, ip
 8000526:	d069      	beq.n	80005fc <__aeabi_fdiv+0xec>
 8000528:	eba2 0203 	sub.w	r2, r2, r3
 800052c:	ea80 0c01 	eor.w	ip, r0, r1
 8000530:	0249      	lsls	r1, r1, #9
 8000532:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000536:	d037      	beq.n	80005a8 <__aeabi_fdiv+0x98>
 8000538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800053c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000540:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000544:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000548:	428b      	cmp	r3, r1
 800054a:	bf38      	it	cc
 800054c:	005b      	lslcc	r3, r3, #1
 800054e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000552:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000556:	428b      	cmp	r3, r1
 8000558:	bf24      	itt	cs
 800055a:	1a5b      	subcs	r3, r3, r1
 800055c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000560:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000564:	bf24      	itt	cs
 8000566:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800056a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800056e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000572:	bf24      	itt	cs
 8000574:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800057c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000580:	bf24      	itt	cs
 8000582:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000586:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	bf18      	it	ne
 800058e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000592:	d1e0      	bne.n	8000556 <__aeabi_fdiv+0x46>
 8000594:	2afd      	cmp	r2, #253	; 0xfd
 8000596:	f63f af50 	bhi.w	800043a <__aeabi_fmul+0x92>
 800059a:	428b      	cmp	r3, r1
 800059c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005b0:	327f      	adds	r2, #127	; 0x7f
 80005b2:	bfc2      	ittt	gt
 80005b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005bc:	4770      	bxgt	lr
 80005be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	3a01      	subs	r2, #1
 80005c8:	e737      	b.n	800043a <__aeabi_fmul+0x92>
 80005ca:	f092 0f00 	teq	r2, #0
 80005ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0040      	lsleq	r0, r0, #1
 80005d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005da:	3a01      	subeq	r2, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xc2>
 80005de:	ea40 000c 	orr.w	r0, r0, ip
 80005e2:	f093 0f00 	teq	r3, #0
 80005e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ea:	bf02      	ittt	eq
 80005ec:	0049      	lsleq	r1, r1, #1
 80005ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005f2:	3b01      	subeq	r3, #1
 80005f4:	d0f9      	beq.n	80005ea <__aeabi_fdiv+0xda>
 80005f6:	ea41 010c 	orr.w	r1, r1, ip
 80005fa:	e795      	b.n	8000528 <__aeabi_fdiv+0x18>
 80005fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000600:	ea92 0f0c 	teq	r2, ip
 8000604:	d108      	bne.n	8000618 <__aeabi_fdiv+0x108>
 8000606:	0242      	lsls	r2, r0, #9
 8000608:	f47f af7d 	bne.w	8000506 <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	f47f af70 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 8000614:	4608      	mov	r0, r1
 8000616:	e776      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000618:	ea93 0f0c 	teq	r3, ip
 800061c:	d104      	bne.n	8000628 <__aeabi_fdiv+0x118>
 800061e:	024b      	lsls	r3, r1, #9
 8000620:	f43f af4c 	beq.w	80004bc <__aeabi_fmul+0x114>
 8000624:	4608      	mov	r0, r1
 8000626:	e76e      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000628:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800062c:	bf18      	it	ne
 800062e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000632:	d1ca      	bne.n	80005ca <__aeabi_fdiv+0xba>
 8000634:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000638:	f47f af5c 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 800063c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000640:	f47f af3c 	bne.w	80004bc <__aeabi_fmul+0x114>
 8000644:	e75f      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000646:	bf00      	nop

08000648 <__aeabi_f2iz>:
 8000648:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800064c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000650:	d30f      	bcc.n	8000672 <__aeabi_f2iz+0x2a>
 8000652:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000656:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800065a:	d90d      	bls.n	8000678 <__aeabi_f2iz+0x30>
 800065c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000664:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000668:	fa23 f002 	lsr.w	r0, r3, r2
 800066c:	bf18      	it	ne
 800066e:	4240      	negne	r0, r0
 8000670:	4770      	bx	lr
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	4770      	bx	lr
 8000678:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800067c:	d101      	bne.n	8000682 <__aeabi_f2iz+0x3a>
 800067e:	0242      	lsls	r2, r0, #9
 8000680:	d105      	bne.n	800068e <__aeabi_f2iz+0x46>
 8000682:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000686:	bf08      	it	eq
 8000688:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800068c:	4770      	bx	lr
 800068e:	f04f 0000 	mov.w	r0, #0
 8000692:	4770      	bx	lr

08000694 <__aeabi_f2uiz>:
 8000694:	0042      	lsls	r2, r0, #1
 8000696:	d20e      	bcs.n	80006b6 <__aeabi_f2uiz+0x22>
 8000698:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800069c:	d30b      	bcc.n	80006b6 <__aeabi_f2uiz+0x22>
 800069e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006a6:	d409      	bmi.n	80006bc <__aeabi_f2uiz+0x28>
 80006a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006b0:	fa23 f002 	lsr.w	r0, r3, r2
 80006b4:	4770      	bx	lr
 80006b6:	f04f 0000 	mov.w	r0, #0
 80006ba:	4770      	bx	lr
 80006bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006c0:	d101      	bne.n	80006c6 <__aeabi_f2uiz+0x32>
 80006c2:	0242      	lsls	r2, r0, #9
 80006c4:	d102      	bne.n	80006cc <__aeabi_f2uiz+0x38>
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ca:	4770      	bx	lr
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_GPIO_Init+0xc0>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a29      	ldr	r2, [pc, #164]	; (8000794 <MX_GPIO_Init+0xc0>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_GPIO_Init+0xc0>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_GPIO_Init+0xc0>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000750:	f000 ff9a 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_GPIO_Init+0xc8>)
 800076c:	f000 fdfc 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000770:	2320      	movs	r3, #32
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0xc4>)
 8000788:	f000 fdee 	bl	8001368 <HAL_GPIO_Init>

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000
 800079c:	40020800 	.word	0x40020800

080007a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f000 ff6b 	bl	80016b8 <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 fb1d 	bl	8000e26 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000009c 	.word	0x2000009c
 80007f4:	40005400 	.word	0x40005400
 80007f8:	000186a0 	.word	0x000186a0

080007fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x7c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d128      	bne.n	8000870 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <HAL_I2C_MspInit+0x80>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <HAL_I2C_MspInit+0x80>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_I2C_MspInit+0x80>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083c:	2312      	movs	r3, #18
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000848:	2304      	movs	r3, #4
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480b      	ldr	r0, [pc, #44]	; (8000880 <HAL_I2C_MspInit+0x84>)
 8000854:	f000 fd88 	bl	8001368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_I2C_MspInit+0x80>)
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_I2C_MspInit+0x80>)
 800085e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000862:	6253      	str	r3, [r2, #36]	; 0x24
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_I2C_MspInit+0x80>)
 8000866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40005400 	.word	0x40005400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400

08000884 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af02      	add	r7, sp, #8
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	f043 030c 	orr.w	r3, r3, #12
 800089a:	b2da      	uxtb	r2, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80008b0:	f107 0118 	add.w	r1, r7, #24
 80008b4:	230a      	movs	r3, #10
 80008b6:	2202      	movs	r2, #2
 80008b8:	486c      	ldr	r0, [pc, #432]	; (8000a6c <lcd_init+0x1e8>)
 80008ba:	f002 fc37 	bl	800312c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80008be:	f640 230d 	movw	r3, #2573	; 0xa0d
 80008c2:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80008c4:	f107 0114 	add.w	r1, r7, #20
 80008c8:	230a      	movs	r3, #10
 80008ca:	2202      	movs	r2, #2
 80008cc:	4867      	ldr	r0, [pc, #412]	; (8000a6c <lcd_init+0x1e8>)
 80008ce:	f002 fc2d 	bl	800312c <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	2205      	movs	r2, #5
 80008d6:	217c      	movs	r1, #124	; 0x7c
 80008d8:	69f8      	ldr	r0, [r7, #28]
 80008da:	f001 fb61 	bl	8001fa0 <HAL_I2C_IsDeviceReady>
 80008de:	4603      	mov	r3, r0
 80008e0:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80008e2:	f107 0113 	add.w	r1, r7, #19
 80008e6:	230a      	movs	r3, #10
 80008e8:	2201      	movs	r2, #1
 80008ea:	4860      	ldr	r0, [pc, #384]	; (8000a6c <lcd_init+0x1e8>)
 80008ec:	f002 fc1e 	bl	800312c <HAL_UART_Transmit>
	HAL_Delay(50);
 80008f0:	2032      	movs	r0, #50	; 0x32
 80008f2:	f000 fc33 	bl	800115c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80008f6:	f107 0218 	add.w	r2, r7, #24
 80008fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2302      	movs	r3, #2
 8000902:	217c      	movs	r1, #124	; 0x7c
 8000904:	69f8      	ldr	r0, [r7, #28]
 8000906:	f001 f81b 	bl	8001940 <HAL_I2C_Master_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800090e:	f107 0112 	add.w	r1, r7, #18
 8000912:	230a      	movs	r3, #10
 8000914:	2201      	movs	r2, #1
 8000916:	4855      	ldr	r0, [pc, #340]	; (8000a6c <lcd_init+0x1e8>)
 8000918:	f002 fc08 	bl	800312c <HAL_UART_Transmit>
	HAL_Delay(50);
 800091c:	2032      	movs	r0, #50	; 0x32
 800091e:	f000 fc1d 	bl	800115c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000922:	f107 0218 	add.w	r2, r7, #24
 8000926:	f241 3388 	movw	r3, #5000	; 0x1388
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2302      	movs	r3, #2
 800092e:	217c      	movs	r1, #124	; 0x7c
 8000930:	69f8      	ldr	r0, [r7, #28]
 8000932:	f001 f805 	bl	8001940 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000936:	2005      	movs	r0, #5
 8000938:	f000 fc10 	bl	800115c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800093c:	f107 0218 	add.w	r2, r7, #24
 8000940:	f241 3388 	movw	r3, #5000	; 0x1388
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2302      	movs	r3, #2
 8000948:	217c      	movs	r1, #124	; 0x7c
 800094a:	69f8      	ldr	r0, [r7, #28]
 800094c:	f000 fff8 	bl	8001940 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2204      	movs	r2, #4
 8000954:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	b2db      	uxtb	r3, r3
 8000960:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000962:	f107 0218 	add.w	r2, r7, #24
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2302      	movs	r3, #2
 800096e:	217c      	movs	r1, #124	; 0x7c
 8000970:	69f8      	ldr	r0, [r7, #28]
 8000972:	f000 ffe5 	bl	8001940 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000976:	2301      	movs	r3, #1
 8000978:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800097a:	f107 0218 	add.w	r2, r7, #24
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2302      	movs	r3, #2
 8000986:	217c      	movs	r1, #124	; 0x7c
 8000988:	69f8      	ldr	r0, [r7, #28]
 800098a:	f000 ffd9 	bl	8001940 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800098e:	2002      	movs	r0, #2
 8000990:	f000 fbe4 	bl	800115c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2202      	movs	r2, #2
 8000998:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	789b      	ldrb	r3, [r3, #2]
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80009a6:	f107 0218 	add.w	r2, r7, #24
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2302      	movs	r3, #2
 80009b2:	217c      	movs	r1, #124	; 0x7c
 80009b4:	69f8      	ldr	r0, [r7, #28]
 80009b6:	f000 ffc3 	bl	8001940 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80009c2:	f107 0210 	add.w	r2, r7, #16
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2302      	movs	r3, #2
 80009ce:	21c4      	movs	r1, #196	; 0xc4
 80009d0:	69f8      	ldr	r0, [r7, #28]
 80009d2:	f000 ffb5 	bl	8001940 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80009d6:	2308      	movs	r3, #8
 80009d8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80009da:	23ff      	movs	r3, #255	; 0xff
 80009dc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80009de:	f107 0210 	add.w	r2, r7, #16
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2302      	movs	r3, #2
 80009ea:	21c4      	movs	r1, #196	; 0xc4
 80009ec:	69f8      	ldr	r0, [r7, #28]
 80009ee:	f000 ffa7 	bl	8001940 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80009f2:	2301      	movs	r3, #1
 80009f4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80009f6:	2320      	movs	r3, #32
 80009f8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80009fa:	f107 0210 	add.w	r2, r7, #16
 80009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2302      	movs	r3, #2
 8000a06:	21c4      	movs	r1, #196	; 0xc4
 8000a08:	69f8      	ldr	r0, [r7, #28]
 8000a0a:	f000 ff99 	bl	8001940 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000a12:	23ff      	movs	r3, #255	; 0xff
 8000a14:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000a16:	f107 020c 	add.w	r2, r7, #12
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2302      	movs	r3, #2
 8000a22:	21c4      	movs	r1, #196	; 0xc4
 8000a24:	69f8      	ldr	r0, [r7, #28]
 8000a26:	f000 ff8b 	bl	8001940 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000a2e:	23ff      	movs	r3, #255	; 0xff
 8000a30:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000a32:	f107 020c 	add.w	r2, r7, #12
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	21c4      	movs	r1, #196	; 0xc4
 8000a40:	69f8      	ldr	r0, [r7, #28]
 8000a42:	f000 ff7d 	bl	8001940 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000a46:	2302      	movs	r3, #2
 8000a48:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000a4a:	23ff      	movs	r3, #255	; 0xff
 8000a4c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000a4e:	f107 020c 	add.w	r2, r7, #12
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	21c4      	movs	r1, #196	; 0xc4
 8000a5c:	69f8      	ldr	r0, [r7, #28]
 8000a5e:	f000 ff6f 	bl	8001940 <HAL_I2C_Master_Transmit>


}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000f0 	.word	0x200000f0

08000a70 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000a86:	e011      	b.n	8000aac <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000a92:	f107 020c 	add.w	r2, r7, #12
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	217c      	movs	r1, #124	; 0x7c
 8000aa0:	6938      	ldr	r0, [r7, #16]
 8000aa2:	f000 ff4d 	bl	8001940 <HAL_I2C_Master_Transmit>
            i++;
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1e7      	bne.n	8000a88 <lcd_print+0x18>
   }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af02      	add	r7, sp, #8
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	70fb      	strb	r3, [r7, #3]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8000ad6:	78bb      	ldrb	r3, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d104      	bne.n	8000ae6 <lcd_position+0x24>
    {
        col = col | 0x80;
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ae2:	70fb      	strb	r3, [r7, #3]
 8000ae4:	e003      	b.n	8000aee <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000aec:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2302      	movs	r3, #2
 8000b02:	217c      	movs	r1, #124	; 0x7c
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 ff1b 	bl	8001940 <HAL_I2C_Master_Transmit>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	71bb      	strb	r3, [r7, #6]
 8000b22:	4613      	mov	r3, r2
 8000b24:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <reglagecouleur+0x74>)
 8000b28:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8000b32:	f107 0210 	add.w	r2, r7, #16
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	21c4      	movs	r1, #196	; 0xc4
 8000b40:	6978      	ldr	r0, [r7, #20]
 8000b42:	f000 fefd 	bl	8001940 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000b46:	2303      	movs	r3, #3
 8000b48:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8000b4e:	f107 020c 	add.w	r2, r7, #12
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2302      	movs	r3, #2
 8000b5a:	21c4      	movs	r1, #196	; 0xc4
 8000b5c:	6978      	ldr	r0, [r7, #20]
 8000b5e:	f000 feef 	bl	8001940 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8000b62:	2302      	movs	r3, #2
 8000b64:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000b66:	797b      	ldrb	r3, [r7, #5]
 8000b68:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000b6a:	f107 0208 	add.w	r2, r7, #8
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2302      	movs	r3, #2
 8000b76:	21c4      	movs	r1, #196	; 0xc4
 8000b78:	6978      	ldr	r0, [r7, #20]
 8000b7a:	f000 fee1 	bl	8001940 <HAL_I2C_Master_Transmit>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000009c 	.word	0x2000009c

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b92:	f000 fa74 	bl	800107e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b96:	f000 f90d 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9a:	f7ff fd9b 	bl	80006d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b9e:	f7ff fdff 	bl	80007a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 f9d9 	bl	8000f58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8000ba6:	4977      	ldr	r1, [pc, #476]	; (8000d84 <main+0x1f8>)
 8000ba8:	4877      	ldr	r0, [pc, #476]	; (8000d88 <main+0x1fc>)
 8000baa:	f7ff fe6b 	bl	8000884 <lcd_init>
  lcd_position(&hi2c1,0,0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4875      	ldr	r0, [pc, #468]	; (8000d88 <main+0x1fc>)
 8000bb4:	f7ff ff85 	bl	8000ac2 <lcd_position>
  //lcd_print(&hi2c1,"mongo");
  reglagecouleur(0,0,255);
 8000bb8:	22ff      	movs	r2, #255	; 0xff
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff ffa9 	bl	8000b14 <reglagecouleur>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		buf[0] = CAPTEUR_CMD_MSB;
 8000bc2:	2324      	movs	r3, #36	; 0x24
 8000bc4:	733b      	strb	r3, [r7, #12]
		buf[1] = CAPTEUR_CMD_LSB;
 8000bc6:	2316      	movs	r3, #22
 8000bc8:	737b      	strb	r3, [r7, #13]
		ret = HAL_I2C_Master_Transmit( &hi2c1, CAPTEUR_ADRS, buf, 2, HAL_MAX_DELAY);
 8000bca:	2388      	movs	r3, #136	; 0x88
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	f107 020c 	add.w	r2, r7, #12
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2302      	movs	r3, #2
 8000bda:	486b      	ldr	r0, [pc, #428]	; (8000d88 <main+0x1fc>)
 8000bdc:	f000 feb0 	bl	8001940 <HAL_I2C_Master_Transmit>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ( ret != HAL_OK)
 8000be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d008      	beq.n	8000c00 <main+0x74>
		{
			strcpy((char*)buf, "erreur_T!!\r\n");
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4a66      	ldr	r2, [pc, #408]	; (8000d8c <main+0x200>)
 8000bf4:	461c      	mov	r4, r3
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bfa:	c407      	stmia	r4!, {r0, r1, r2}
 8000bfc:	7023      	strb	r3, [r4, #0]
 8000bfe:	e0ad      	b.n	8000d5c <main+0x1d0>
		}
			else
		{

		ret = HAL_I2C_Master_Receive( &hi2c1, CAPTEUR_ADRS, buf, 6, HAL_MAX_DELAY);
 8000c00:	2388      	movs	r3, #136	; 0x88
 8000c02:	b299      	uxth	r1, r3
 8000c04:	f107 020c 	add.w	r2, r7, #12
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2306      	movs	r3, #6
 8000c10:	485d      	ldr	r0, [pc, #372]	; (8000d88 <main+0x1fc>)
 8000c12:	f000 ff93 	bl	8001b3c <HAL_I2C_Master_Receive>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if ( ret != HAL_OK)
 8000c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d008      	beq.n	8000c36 <main+0xaa>
				{
					strcpy((char*)buf, "erreur_R!!\r\n");
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4a59      	ldr	r2, [pc, #356]	; (8000d90 <main+0x204>)
 8000c2a:	461c      	mov	r4, r3
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c30:	c407      	stmia	r4!, {r0, r1, r2}
 8000c32:	7023      	strb	r3, [r4, #0]
 8000c34:	e092      	b.n	8000d5c <main+0x1d0>
				}
		else
		{

			valeur  =   buf[1] | buf[0] << 8;
 8000c36:	7b7b      	ldrb	r3, [r7, #13]
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	7b3b      	ldrb	r3, [r7, #12]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	817b      	strh	r3, [r7, #10]


			temp = -45 + 175 * ( (float)valeur / 65535);
 8000c48:	897b      	ldrh	r3, [r7, #10]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fb53 	bl	80002f8 <__aeabi_ui2f>
 8000c52:	4603      	mov	r3, r0
 8000c54:	494f      	ldr	r1, [pc, #316]	; (8000d94 <main+0x208>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fc5a 	bl	8000510 <__aeabi_fdiv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	494e      	ldr	r1, [pc, #312]	; (8000d98 <main+0x20c>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fba1 	bl	80003a8 <__aeabi_fmul>
 8000c66:	4603      	mov	r3, r0
 8000c68:	494c      	ldr	r1, [pc, #304]	; (8000d9c <main+0x210>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fa92 	bl	8000194 <__aeabi_fsub>
 8000c70:	4603      	mov	r3, r0
 8000c72:	607b      	str	r3, [r7, #4]

			partieEntiere = (int) temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fce6 	bl	8000648 <__aeabi_f2iz>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fb3e 	bl	8000300 <__aeabi_i2f>
 8000c84:	4603      	mov	r3, r0
 8000c86:	623b      	str	r3, [r7, #32]
			partieDecimal = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	61fb      	str	r3, [r7, #28]
			partieDecimal *= 100;
 8000c8c:	4944      	ldr	r1, [pc, #272]	; (8000da0 <main+0x214>)
 8000c8e:	69f8      	ldr	r0, [r7, #28]
 8000c90:	f7ff fb8a 	bl	80003a8 <__aeabi_fmul>
 8000c94:	4603      	mov	r3, r0
 8000c96:	61fb      	str	r3, [r7, #28]
			partieDecimal = partieDecimal - (partieEntiere * 100);
 8000c98:	4941      	ldr	r1, [pc, #260]	; (8000da0 <main+0x214>)
 8000c9a:	6a38      	ldr	r0, [r7, #32]
 8000c9c:	f7ff fb84 	bl	80003a8 <__aeabi_fmul>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	69f8      	ldr	r0, [r7, #28]
 8000ca6:	f7ff fa75 	bl	8000194 <__aeabi_fsub>
 8000caa:	4603      	mov	r3, r0
 8000cac:	61fb      	str	r3, [r7, #28]

			valeur = buf[4] | buf[3] << 8;
 8000cae:	7c3b      	ldrb	r3, [r7, #16]
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	817b      	strh	r3, [r7, #10]


			umid = 100*( (float)valeur / 65535);
 8000cc0:	897b      	ldrh	r3, [r7, #10]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fb17 	bl	80002f8 <__aeabi_ui2f>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4931      	ldr	r1, [pc, #196]	; (8000d94 <main+0x208>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fc1e 	bl	8000510 <__aeabi_fdiv>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4932      	ldr	r1, [pc, #200]	; (8000da0 <main+0x214>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fb65 	bl	80003a8 <__aeabi_fmul>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	61bb      	str	r3, [r7, #24]

			sprintf( (char*)buf, "%u.%u C ; %u  ", (unsigned int) partieEntiere,(unsigned int) partieDecimal,(unsigned int) umid  );
 8000ce2:	6a38      	ldr	r0, [r7, #32]
 8000ce4:	f7ff fcd6 	bl	8000694 <__aeabi_f2uiz>
 8000ce8:	4604      	mov	r4, r0
 8000cea:	69f8      	ldr	r0, [r7, #28]
 8000cec:	f7ff fcd2 	bl	8000694 <__aeabi_f2uiz>
 8000cf0:	4605      	mov	r5, r0
 8000cf2:	69b8      	ldr	r0, [r7, #24]
 8000cf4:	f7ff fcce 	bl	8000694 <__aeabi_f2uiz>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f107 000c 	add.w	r0, r7, #12
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	462b      	mov	r3, r5
 8000d02:	4622      	mov	r2, r4
 8000d04:	4927      	ldr	r1, [pc, #156]	; (8000da4 <main+0x218>)
 8000d06:	f002 fc19 	bl	800353c <siprintf>
			lcd_position(&hi2c1,0,0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	481e      	ldr	r0, [pc, #120]	; (8000d88 <main+0x1fc>)
 8000d10:	f7ff fed7 	bl	8000ac2 <lcd_position>
			lcd_print(&hi2c1,"Temp :  ");
 8000d14:	4924      	ldr	r1, [pc, #144]	; (8000da8 <main+0x21c>)
 8000d16:	481c      	ldr	r0, [pc, #112]	; (8000d88 <main+0x1fc>)
 8000d18:	f7ff feaa 	bl	8000a70 <lcd_print>
			lcd_position(&hi2c1,7,0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2107      	movs	r1, #7
 8000d20:	4819      	ldr	r0, [pc, #100]	; (8000d88 <main+0x1fc>)
 8000d22:	f7ff fece 	bl	8000ac2 <lcd_position>
			lcd_print(&hi2c1,buf);
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4816      	ldr	r0, [pc, #88]	; (8000d88 <main+0x1fc>)
 8000d2e:	f7ff fe9f 	bl	8000a70 <lcd_print>
			lcd_position(&hi2c1,0,1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2100      	movs	r1, #0
 8000d36:	4814      	ldr	r0, [pc, #80]	; (8000d88 <main+0x1fc>)
 8000d38:	f7ff fec3 	bl	8000ac2 <lcd_position>
			lcd_print(&hi2c1,"Hum  : ");
 8000d3c:	491b      	ldr	r1, [pc, #108]	; (8000dac <main+0x220>)
 8000d3e:	4812      	ldr	r0, [pc, #72]	; (8000d88 <main+0x1fc>)
 8000d40:	f7ff fe96 	bl	8000a70 <lcd_print>
			lcd_position(&hi2c1,7,1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2107      	movs	r1, #7
 8000d48:	480f      	ldr	r0, [pc, #60]	; (8000d88 <main+0x1fc>)
 8000d4a:	f7ff feba 	bl	8000ac2 <lcd_position>
			lcd_print(&hi2c1,&buf[10]);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	330a      	adds	r3, #10
 8000d54:	4619      	mov	r1, r3
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <main+0x1fc>)
 8000d58:	f7ff fe8a 	bl	8000a70 <lcd_print>

		}

		}

		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa0b 	bl	800017c <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f107 010c 	add.w	r1, r7, #12
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	480f      	ldr	r0, [pc, #60]	; (8000db0 <main+0x224>)
 8000d74:	f002 f9da 	bl	800312c <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7c:	f000 f9ee 	bl	800115c <HAL_Delay>
		buf[0] = CAPTEUR_CMD_MSB;
 8000d80:	e71f      	b.n	8000bc2 <main+0x36>
 8000d82:	bf00      	nop
 8000d84:	2000008c 	.word	0x2000008c
 8000d88:	2000009c 	.word	0x2000009c
 8000d8c:	08003dc8 	.word	0x08003dc8
 8000d90:	08003dd8 	.word	0x08003dd8
 8000d94:	477fff00 	.word	0x477fff00
 8000d98:	432f0000 	.word	0x432f0000
 8000d9c:	42340000 	.word	0x42340000
 8000da0:	42c80000 	.word	0x42c80000
 8000da4:	08003de8 	.word	0x08003de8
 8000da8:	08003df8 	.word	0x08003df8
 8000dac:	08003e04 	.word	0x08003e04
 8000db0:	200000f0 	.word	0x200000f0

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b096      	sub	sp, #88	; 0x58
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fbb2 	bl	800352c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de2:	2302      	movs	r3, #2
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dea:	2310      	movs	r3, #16
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df2:	2300      	movs	r3, #0
 8000df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  //RCC_OscInitStruct.PLL.PLLM = 1;
 // RCC_OscInitStruct.PLL.PLLN = 10;
 // RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 // RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 // RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fd84 	bl	8002908 <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000e06:	f000 f80e 	bl	8000e26 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  /*
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }/*/
}
 8000e1e:	bf00      	nop
 8000e20:	3758      	adds	r7, #88	; 0x58
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2a:	b672      	cpsid	i
}
 8000e2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <Error_Handler+0x8>

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e40:	6253      	str	r3, [r2, #36]	; 0x24
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6213      	str	r3, [r2, #32]
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6253      	str	r3, [r2, #36]	; 0x24
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x5c>)
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e7e:	2007      	movs	r0, #7
 8000e80:	f000 fa3e 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f925 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f002 fae2 	bl	80034d8 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20014000 	.word	0x20014000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000090 	.word	0x20000090
 8000f48:	20000150 	.word	0x20000150

08000f4c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_USART2_UART_Init+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f002 f87c 	bl	800308c <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9a:	f7ff ff44 	bl	8000e26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000f0 	.word	0x200000f0
 8000fa8:	40004400 	.word	0x40004400

08000fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_UART_MspInit+0x7c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d127      	bne.n	800101e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6253      	str	r3, [r2, #36]	; 0x24
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_UART_MspInit+0x80>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffe:	230c      	movs	r3, #12
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_UART_MspInit+0x84>)
 800101a:	f000 f9a5 	bl	8001368 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ff8a 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103a:	490c      	ldr	r1, [pc, #48]	; (800106c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <LoopFillZerobss+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001050:	4c09      	ldr	r4, [pc, #36]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f002 fa41 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff fd93 	bl	8000b8c <main>
  bx lr
 8001066:	4770      	bx	lr
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001070:	08003e60 	.word	0x08003e60
  ldr r2, =_sbss
 8001074:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001078:	2000014c 	.word	0x2000014c

0800107c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_IRQHandler>

0800107e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f939 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f80e 	bl	80010b0 <HAL_InitTick>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	e001      	b.n	80010a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a0:	f7ff fec6 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_InitTick+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d022      	beq.n	800110a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_InitTick+0x6c>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_InitTick+0x68>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f938 	bl	800134e <HAL_SYSTICK_Config>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10f      	bne.n	8001104 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	d809      	bhi.n	80010fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ea:	2200      	movs	r2, #0
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	f000 f910 	bl	8001316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_InitTick+0x70>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e007      	b.n	800110e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e004      	b.n	800110e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e001      	b.n	800110e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000008 	.word	0x20000008
 800111c:	20000000 	.word	0x20000000
 8001120:	20000004 	.word	0x20000004

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x1c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x20>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4413      	add	r3, r2
 8001132:	4a03      	ldr	r2, [pc, #12]	; (8001140 <HAL_IncTick+0x1c>)
 8001134:	6013      	str	r3, [r2, #0]
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000138 	.word	0x20000138
 8001144:	20000008 	.word	0x20000008

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000138 	.word	0x20000138

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fff0 	bl	8001148 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d004      	beq.n	8001180 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_Delay+0x40>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001180:	bf00      	nop
 8001182:	f7ff ffe1 	bl	8001148 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	429a      	cmp	r2, r3
 8001190:	d8f7      	bhi.n	8001182 <HAL_Delay+0x26>
  {
  }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000008 	.word	0x20000008

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff90 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff49 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff5e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffb0 	bl	80012bc <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800137e:	e160      	b.n	8001642 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8152 	beq.w	800163c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b03      	cmp	r3, #3
 800141c:	d017      	beq.n	800144e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	6939      	ldr	r1, [r7, #16]
 800149e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0203 	and.w	r2, r3, #3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80ac 	beq.w	800163c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_GPIO_Init+0x2f8>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a5d      	ldr	r2, [pc, #372]	; (8001660 <HAL_GPIO_Init+0x2f8>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_GPIO_Init+0x2f8>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80014fc:	4a59      	ldr	r2, [pc, #356]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d025      	beq.n	8001574 <HAL_GPIO_Init+0x20c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_GPIO_Init+0x304>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d01f      	beq.n	8001570 <HAL_GPIO_Init+0x208>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a4f      	ldr	r2, [pc, #316]	; (8001670 <HAL_GPIO_Init+0x308>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d019      	beq.n	800156c <HAL_GPIO_Init+0x204>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <HAL_GPIO_Init+0x30c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_GPIO_Init+0x200>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x310>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1fc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4c      	ldr	r2, [pc, #304]	; (800167c <HAL_GPIO_Init+0x314>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1f8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <HAL_GPIO_Init+0x318>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1f4>
 8001558:	2306      	movs	r3, #6
 800155a:	e00c      	b.n	8001576 <HAL_GPIO_Init+0x20e>
 800155c:	2307      	movs	r3, #7
 800155e:	e00a      	b.n	8001576 <HAL_GPIO_Init+0x20e>
 8001560:	2305      	movs	r3, #5
 8001562:	e008      	b.n	8001576 <HAL_GPIO_Init+0x20e>
 8001564:	2304      	movs	r3, #4
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x20e>
 8001568:	2303      	movs	r3, #3
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x20e>
 800156c:	2302      	movs	r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x20e>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x20e>
 8001574:	2300      	movs	r3, #0
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001586:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001594:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015b8:	4a32      	ldr	r2, [pc, #200]	; (8001684 <HAL_GPIO_Init+0x31c>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_GPIO_Init+0x31c>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015e2:	4a28      	ldr	r2, [pc, #160]	; (8001684 <HAL_GPIO_Init+0x31c>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_GPIO_Init+0x31c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_GPIO_Init+0x31c>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f ae97 	bne.w	8001380 <HAL_GPIO_Init+0x18>
  }
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40010000 	.word	0x40010000
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40021000 	.word	0x40021000
 800167c:	40021400 	.word	0x40021400
 8001680:	40021800 	.word	0x40021800
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	041a      	lsls	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	619a      	str	r2, [r3, #24]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e12b      	b.n	8001922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff f88c 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2224      	movs	r2, #36	; 0x24
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800170a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800171a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800171c:	f001 fc2e 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 8001720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4a81      	ldr	r2, [pc, #516]	; (800192c <HAL_I2C_Init+0x274>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d807      	bhi.n	800173c <HAL_I2C_Init+0x84>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4a80      	ldr	r2, [pc, #512]	; (8001930 <HAL_I2C_Init+0x278>)
 8001730:	4293      	cmp	r3, r2
 8001732:	bf94      	ite	ls
 8001734:	2301      	movls	r3, #1
 8001736:	2300      	movhi	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e006      	b.n	800174a <HAL_I2C_Init+0x92>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a7d      	ldr	r2, [pc, #500]	; (8001934 <HAL_I2C_Init+0x27c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	bf94      	ite	ls
 8001744:	2301      	movls	r3, #1
 8001746:	2300      	movhi	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0e7      	b.n	8001922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4a78      	ldr	r2, [pc, #480]	; (8001938 <HAL_I2C_Init+0x280>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9b      	lsrs	r3, r3, #18
 800175c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	430a      	orrs	r2, r1
 8001770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a6a      	ldr	r2, [pc, #424]	; (800192c <HAL_I2C_Init+0x274>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d802      	bhi.n	800178c <HAL_I2C_Init+0xd4>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3301      	adds	r3, #1
 800178a:	e009      	b.n	80017a0 <HAL_I2C_Init+0xe8>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	4a69      	ldr	r2, [pc, #420]	; (800193c <HAL_I2C_Init+0x284>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	3301      	adds	r3, #1
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	495c      	ldr	r1, [pc, #368]	; (800192c <HAL_I2C_Init+0x274>)
 80017bc:	428b      	cmp	r3, r1
 80017be:	d819      	bhi.n	80017f4 <HAL_I2C_Init+0x13c>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1e59      	subs	r1, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ce:	1c59      	adds	r1, r3, #1
 80017d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017d4:	400b      	ands	r3, r1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00a      	beq.n	80017f0 <HAL_I2C_Init+0x138>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1e59      	subs	r1, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	e051      	b.n	8001894 <HAL_I2C_Init+0x1dc>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e04f      	b.n	8001894 <HAL_I2C_Init+0x1dc>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d111      	bne.n	8001820 <HAL_I2C_Init+0x168>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e58      	subs	r0, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	440b      	add	r3, r1
 800180a:	fbb0 f3f3 	udiv	r3, r0, r3
 800180e:	3301      	adds	r3, #1
 8001810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	e012      	b.n	8001846 <HAL_I2C_Init+0x18e>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	0099      	lsls	r1, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Init+0x196>
 800184a:	2301      	movs	r3, #1
 800184c:	e022      	b.n	8001894 <HAL_I2C_Init+0x1dc>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10e      	bne.n	8001874 <HAL_I2C_Init+0x1bc>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e58      	subs	r0, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6859      	ldr	r1, [r3, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	440b      	add	r3, r1
 8001864:	fbb0 f3f3 	udiv	r3, r0, r3
 8001868:	3301      	adds	r3, #1
 800186a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	e00f      	b.n	8001894 <HAL_I2C_Init+0x1dc>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e58      	subs	r0, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	0099      	lsls	r1, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	6809      	ldr	r1, [r1, #0]
 8001898:	4313      	orrs	r3, r2
 800189a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6911      	ldr	r1, [r2, #16]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68d2      	ldr	r2, [r2, #12]
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	000186a0 	.word	0x000186a0
 8001930:	001e847f 	.word	0x001e847f
 8001934:	003d08ff 	.word	0x003d08ff
 8001938:	431bde83 	.word	0x431bde83
 800193c:	10624dd3 	.word	0x10624dd3

08001940 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af02      	add	r7, sp, #8
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	461a      	mov	r2, r3
 800194c:	460b      	mov	r3, r1
 800194e:	817b      	strh	r3, [r7, #10]
 8001950:	4613      	mov	r3, r2
 8001952:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fbf8 	bl	8001148 <HAL_GetTick>
 8001958:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	f040 80e0 	bne.w	8001b28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2319      	movs	r3, #25
 800196e:	2201      	movs	r2, #1
 8001970:	4970      	ldr	r1, [pc, #448]	; (8001b34 <HAL_I2C_Master_Transmit+0x1f4>)
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fd92 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800197e:	2302      	movs	r3, #2
 8001980:	e0d3      	b.n	8001b2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_I2C_Master_Transmit+0x50>
 800198c:	2302      	movs	r3, #2
 800198e:	e0cc      	b.n	8001b2a <HAL_I2C_Master_Transmit+0x1ea>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d007      	beq.n	80019b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2221      	movs	r2, #33	; 0x21
 80019ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2210      	movs	r2, #16
 80019d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	893a      	ldrh	r2, [r7, #8]
 80019e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4a50      	ldr	r2, [pc, #320]	; (8001b38 <HAL_I2C_Master_Transmit+0x1f8>)
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019f8:	8979      	ldrh	r1, [r7, #10]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fbfc 	bl	80021fc <I2C_MasterRequestWrite>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e08d      	b.n	8001b2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a24:	e066      	b.n	8001af4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	6a39      	ldr	r1, [r7, #32]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fe50 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00d      	beq.n	8001a52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d107      	bne.n	8001a4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06b      	b.n	8001b2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d11b      	bne.n	8001ac8 <HAL_I2C_Master_Transmit+0x188>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d017      	beq.n	8001ac8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	6a39      	ldr	r1, [r7, #32]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fe47 	bl	8002760 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00d      	beq.n	8001af4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d107      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e01a      	b.n	8001b2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d194      	bne.n	8001a26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	e000      	b.n	8001b2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b28:	2302      	movs	r3, #2
  }
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	00100002 	.word	0x00100002
 8001b38:	ffff0000 	.word	0xffff0000

08001b3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	461a      	mov	r2, r3
 8001b48:	460b      	mov	r3, r1
 8001b4a:	817b      	strh	r3, [r7, #10]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff fafa 	bl	8001148 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	f040 8217 	bne.w	8001f92 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2319      	movs	r3, #25
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	497c      	ldr	r1, [pc, #496]	; (8001d60 <HAL_I2C_Master_Receive+0x224>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fc94 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e20a      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_I2C_Master_Receive+0x50>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e203      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d007      	beq.n	8001bb2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2222      	movs	r2, #34	; 0x22
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	893a      	ldrh	r2, [r7, #8]
 8001be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a5c      	ldr	r2, [pc, #368]	; (8001d64 <HAL_I2C_Master_Receive+0x228>)
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bf4:	8979      	ldrh	r1, [r7, #10]
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 fb80 	bl	8002300 <I2C_MasterRequestRead>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1c4      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d113      	bne.n	8001c3a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	623b      	str	r3, [r7, #32]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e198      	b.n	8001f6c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d11b      	bne.n	8001c7a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e178      	b.n	8001f6c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d11b      	bne.n	8001cba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	e158      	b.n	8001f6c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ce0:	e144      	b.n	8001f6c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	f200 80f1 	bhi.w	8001ece <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d123      	bne.n	8001d3c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fd79 	bl	80027f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e145      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d3a:	e117      	b.n	8001f6c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d14e      	bne.n	8001de2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4906      	ldr	r1, [pc, #24]	; (8001d68 <HAL_I2C_Master_Receive+0x22c>)
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 fba4 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e11a      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
 8001d5e:	bf00      	nop
 8001d60:	00100002 	.word	0x00100002
 8001d64:	ffff0000 	.word	0xffff0000
 8001d68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001de0:	e0c4      	b.n	8001f6c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	2200      	movs	r2, #0
 8001dea:	496c      	ldr	r1, [pc, #432]	; (8001f9c <HAL_I2C_Master_Receive+0x460>)
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fb55 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0cb      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e44:	2200      	movs	r2, #0
 8001e46:	4955      	ldr	r1, [pc, #340]	; (8001f9c <HAL_I2C_Master_Receive+0x460>)
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fb27 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e09d      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ecc:	e04e      	b.n	8001f6c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fc8c 	bl	80027f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e058      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d124      	bne.n	8001f6c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f38:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f47f aeb6 	bne.w	8001ce2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	00010004 	.word	0x00010004

08001fa0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	460b      	mov	r3, r1
 8001fae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff f8ca 	bl	8001148 <HAL_GetTick>
 8001fb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	f040 8111 	bne.w	80021ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2319      	movs	r3, #25
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4988      	ldr	r1, [pc, #544]	; (80021f4 <HAL_I2C_IsDeviceReady+0x254>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fa62 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e104      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_I2C_IsDeviceReady+0x50>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0fd      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x24c>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d007      	beq.n	8002016 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2224      	movs	r2, #36	; 0x24
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a70      	ldr	r2, [pc, #448]	; (80021f8 <HAL_I2C_IsDeviceReady+0x258>)
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002048:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fa20 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002070:	d103      	bne.n	800207a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0b6      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800208c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff f85b 	bl	8001148 <HAL_GetTick>
 8002092:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020c2:	e025      	b.n	8002110 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff f840 	bl	8001148 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <HAL_I2C_IsDeviceReady+0x13a>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	22a0      	movs	r2, #160	; 0xa0
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2ba0      	cmp	r3, #160	; 0xa0
 800211a:	d005      	beq.n	8002128 <HAL_I2C_IsDeviceReady+0x188>
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_I2C_IsDeviceReady+0x188>
 8002122:	7dbb      	ldrb	r3, [r7, #22]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0cd      	beq.n	80020c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d129      	bne.n	8002192 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2319      	movs	r3, #25
 800216a:	2201      	movs	r2, #1
 800216c:	4921      	ldr	r1, [pc, #132]	; (80021f4 <HAL_I2C_IsDeviceReady+0x254>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f994 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e036      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e02c      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	490f      	ldr	r1, [pc, #60]	; (80021f4 <HAL_I2C_IsDeviceReady+0x254>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f970 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e012      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f4ff af32 	bcc.w	800203a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	00100002 	.word	0x00100002
 80021f8:	ffff0000 	.word	0xffff0000

080021fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	460b      	mov	r3, r1
 800220a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d006      	beq.n	8002226 <I2C_MasterRequestWrite+0x2a>
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d003      	beq.n	8002226 <I2C_MasterRequestWrite+0x2a>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002224:	d108      	bne.n	8002238 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e00b      	b.n	8002250 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	2b12      	cmp	r3, #18
 800223e:	d107      	bne.n	8002250 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f91d 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002276:	d103      	bne.n	8002280 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e035      	b.n	80022f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800228c:	d108      	bne.n	80022a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800229c:	611a      	str	r2, [r3, #16]
 800229e:	e01b      	b.n	80022d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022a0:	897b      	ldrh	r3, [r7, #10]
 80022a2:	11db      	asrs	r3, r3, #7
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f003 0306 	and.w	r3, r3, #6
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f063 030f 	orn	r3, r3, #15
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <I2C_MasterRequestWrite+0xfc>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f966 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e010      	b.n	80022f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <I2C_MasterRequestWrite+0x100>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f956 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	00010008 	.word	0x00010008
 80022fc:	00010002 	.word	0x00010002

08002300 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	460b      	mov	r3, r1
 800230e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002324:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d006      	beq.n	800233a <I2C_MasterRequestRead+0x3a>
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d003      	beq.n	800233a <I2C_MasterRequestRead+0x3a>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002338:	d108      	bne.n	800234c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e00b      	b.n	8002364 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	2b11      	cmp	r3, #17
 8002352:	d107      	bne.n	8002364 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002362:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f893 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238a:	d103      	bne.n	8002394 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e079      	b.n	800248c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a0:	d108      	bne.n	80023b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	e05f      	b.n	8002474 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023b4:	897b      	ldrh	r3, [r7, #10]
 80023b6:	11db      	asrs	r3, r3, #7
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f003 0306 	and.w	r3, r3, #6
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f063 030f 	orn	r3, r3, #15
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4930      	ldr	r1, [pc, #192]	; (8002494 <I2C_MasterRequestRead+0x194>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f8dc 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e054      	b.n	800248c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023e2:	897b      	ldrh	r3, [r7, #10]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4929      	ldr	r1, [pc, #164]	; (8002498 <I2C_MasterRequestRead+0x198>)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f8cc 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e044      	b.n	800248c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002426:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f831 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244e:	d103      	bne.n	8002458 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e017      	b.n	800248c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800245c:	897b      	ldrh	r3, [r7, #10]
 800245e:	11db      	asrs	r3, r3, #7
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f003 0306 	and.w	r3, r3, #6
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f063 030e 	orn	r3, r3, #14
 800246c:	b2da      	uxtb	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <I2C_MasterRequestRead+0x198>)
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f888 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	00010008 	.word	0x00010008
 8002498:	00010002 	.word	0x00010002

0800249c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ac:	e048      	b.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d044      	beq.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7fe fe47 	bl	8001148 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d139      	bne.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10d      	bne.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	43da      	mvns	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	e00c      	b.n	800250c <I2C_WaitOnFlagUntilTimeout+0x70>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	43da      	mvns	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	429a      	cmp	r2, r3
 8002510:	d116      	bne.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e023      	b.n	8002588 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d10d      	bne.n	8002566 <I2C_WaitOnFlagUntilTimeout+0xca>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	43da      	mvns	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4013      	ands	r3, r2
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	e00c      	b.n	8002580 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	429a      	cmp	r2, r3
 8002584:	d093      	beq.n	80024ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259e:	e071      	b.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d123      	bne.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e067      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d041      	beq.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002600:	f7fe fda2 	bl	8001148 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d136      	bne.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10c      	bne.n	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4013      	ands	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	e00b      	b.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	43da      	mvns	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e021      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10c      	bne.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	43da      	mvns	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4013      	ands	r3, r2
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e00b      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f47f af6d 	bne.w	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026dc:	e034      	b.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8e3 	bl	80028aa <I2C_IsAcknowledgeFailed>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e034      	b.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d028      	beq.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fd27 	bl	8001148 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11d      	bne.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d016      	beq.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	d1c3      	bne.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276c:	e034      	b.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f89b 	bl	80028aa <I2C_IsAcknowledgeFailed>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e034      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d028      	beq.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7fe fcdf 	bl	8001148 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	d302      	bcc.n	800279c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11d      	bne.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d016      	beq.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d1c3      	bne.n	800276e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027fc:	e049      	b.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d119      	bne.n	8002840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0210 	mvn.w	r2, #16
 8002814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e030      	b.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fe fc82 	bl	8001148 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11d      	bne.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d016      	beq.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e007      	b.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b40      	cmp	r3, #64	; 0x40
 800289e:	d1ae      	bne.n	80027fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d11b      	bne.n	80028fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0204 	orr.w	r2, r3, #4
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
	...

08002908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e31d      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291a:	4b94      	ldr	r3, [pc, #592]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002924:	4b91      	ldr	r3, [pc, #580]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d07b      	beq.n	8002a32 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b08      	cmp	r3, #8
 800293e:	d006      	beq.n	800294e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d10f      	bne.n	8002966 <HAL_RCC_OscConfig+0x5e>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d10b      	bne.n	8002966 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294e:	4b87      	ldr	r3, [pc, #540]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d06a      	beq.n	8002a30 <HAL_RCC_OscConfig+0x128>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d166      	bne.n	8002a30 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e2f7      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b7f      	ldr	r3, [pc, #508]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7e      	ldr	r2, [pc, #504]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e02d      	b.n	80029d8 <HAL_RCC_OscConfig+0xd0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10c      	bne.n	800299e <HAL_RCC_OscConfig+0x96>
 8002984:	4b79      	ldr	r3, [pc, #484]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a78      	ldr	r2, [pc, #480]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b76      	ldr	r3, [pc, #472]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a75      	ldr	r2, [pc, #468]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e01c      	b.n	80029d8 <HAL_RCC_OscConfig+0xd0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0xb8>
 80029a6:	4b71      	ldr	r3, [pc, #452]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a70      	ldr	r2, [pc, #448]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b6e      	ldr	r3, [pc, #440]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6d      	ldr	r2, [pc, #436]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0xd0>
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a69      	ldr	r2, [pc, #420]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a66      	ldr	r2, [pc, #408]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d013      	beq.n	8002a08 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe fbb2 	bl	8001148 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fbae 	bl	8001148 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e2ad      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029fa:	4b5c      	ldr	r3, [pc, #368]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fb9e 	bl	8001148 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fb9a 	bl	8001148 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e299      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a22:	4b52      	ldr	r3, [pc, #328]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d05a      	beq.n	8002af4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d119      	bne.n	8002a7e <HAL_RCC_OscConfig+0x176>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d116      	bne.n	8002a7e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a50:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_OscConfig+0x160>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e276      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	493d      	ldr	r1, [pc, #244]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7c:	e03a      	b.n	8002af4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d020      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCC_OscConfig+0x268>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fb5c 	bl	8001148 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe fb58 	bl	8001148 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e257      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa6:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	492a      	ldr	r1, [pc, #168]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
 8002ac6:	e015      	b.n	8002af4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_RCC_OscConfig+0x268>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fb3b 	bl	8001148 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fb37 	bl	8001148 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e236      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ae8:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80b8 	beq.w	8002c72 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d170      	bne.n	8002bea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b08:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_OscConfig+0x218>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e21a      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d921      	bls.n	8002b74 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fa49 	bl	8002fcc <RCC_SetFlashLatencyFromMSIRange>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e208      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4906      	ldr	r1, [pc, #24]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	061b      	lsls	r3, r3, #24
 8002b64:	4901      	ldr	r1, [pc, #4]	; (8002b6c <HAL_RCC_OscConfig+0x264>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
 8002b6a:	e020      	b.n	8002bae <HAL_RCC_OscConfig+0x2a6>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b74:	4ba4      	ldr	r3, [pc, #656]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	49a1      	ldr	r1, [pc, #644]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b86:	4ba0      	ldr	r3, [pc, #640]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	499c      	ldr	r1, [pc, #624]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fa14 	bl	8002fcc <RCC_SetFlashLatencyFromMSIRange>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1d3      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	0b5b      	lsrs	r3, r3, #13
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002bbe:	4a92      	ldr	r2, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002bc0:	6892      	ldr	r2, [r2, #8]
 8002bc2:	0912      	lsrs	r2, r2, #4
 8002bc4:	f002 020f 	and.w	r2, r2, #15
 8002bc8:	4990      	ldr	r1, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0x504>)
 8002bca:	5c8a      	ldrb	r2, [r1, r2]
 8002bcc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bce:	4a90      	ldr	r2, [pc, #576]	; (8002e10 <HAL_RCC_OscConfig+0x508>)
 8002bd0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bd2:	4b90      	ldr	r3, [pc, #576]	; (8002e14 <HAL_RCC_OscConfig+0x50c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fa6a 	bl	80010b0 <HAL_InitTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d045      	beq.n	8002c72 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	e1b5      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d029      	beq.n	8002c46 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <HAL_RCC_OscConfig+0x510>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe faa6 	bl	8001148 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c00:	f7fe faa2 	bl	8001148 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1a1      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c12:	4b7d      	ldr	r3, [pc, #500]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4977      	ldr	r1, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	4972      	ldr	r1, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c46:	4b74      	ldr	r3, [pc, #464]	; (8002e18 <HAL_RCC_OscConfig+0x510>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fa7c 	bl	8001148 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c54:	f7fe fa78 	bl	8001148 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e177      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c66:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d030      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <HAL_RCC_OscConfig+0x514>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fa5c 	bl	8001148 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe fa58 	bl	8001148 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e157      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ca6:	4b58      	ldr	r3, [pc, #352]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x38c>
 8002cb2:	e015      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_OscConfig+0x514>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fa45 	bl	8001148 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fa41 	bl	8001148 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e140      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80b5 	beq.w	8002e58 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	4a41      	ldr	r2, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6253      	str	r3, [r2, #36]	; 0x24
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x518>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b3e      	ldr	r3, [pc, #248]	; (8002e20 <HAL_RCC_OscConfig+0x518>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a3d      	ldr	r2, [pc, #244]	; (8002e20 <HAL_RCC_OscConfig+0x518>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fa09 	bl	8001148 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe fa05 	bl	8001148 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e104      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <HAL_RCC_OscConfig+0x518>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x466>
 8002d60:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d6c:	e02d      	b.n	8002dca <HAL_RCC_OscConfig+0x4c2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x488>
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d80:	6353      	str	r3, [r2, #52]	; 0x34
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d8c:	6353      	str	r3, [r2, #52]	; 0x34
 8002d8e:	e01c      	b.n	8002dca <HAL_RCC_OscConfig+0x4c2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4aa>
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da2:	6353      	str	r3, [r2, #52]	; 0x34
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	4a17      	ldr	r2, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6353      	str	r3, [r2, #52]	; 0x34
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0x4c2>
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dc8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe f9b9 	bl	8001148 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe f9b5 	bl	8001148 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0b2      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCC_OscConfig+0x4d2>
 8002dfc:	e023      	b.n	8002e46 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f9a3 	bl	8001148 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e04:	e019      	b.n	8002e3a <HAL_RCC_OscConfig+0x532>
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08003e0c 	.word	0x08003e0c
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004
 8002e18:	42470020 	.word	0x42470020
 8002e1c:	42470680 	.word	0x42470680
 8002e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e24:	f7fe f990 	bl	8001148 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e08d      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e3a:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ee      	bne.n	8002e24 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	4a43      	ldr	r2, [pc, #268]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d079      	beq.n	8002f54 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d056      	beq.n	8002f14 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d13b      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_OscConfig+0x65c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe f968 	bl	8001148 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe f964 	bl	8001148 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e063      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	4319      	orrs	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	492b      	ldr	r1, [pc, #172]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCC_OscConfig+0x65c>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe f943 	bl	8001148 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe f93f 	bl	8001148 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e03e      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x5be>
 8002ee4:	e036      	b.n	8002f54 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_RCC_OscConfig+0x65c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe f92c 	bl	8001148 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f928 	bl	8001148 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e027      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5ec>
 8002f12:	e01f      	b.n	8002f54 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e01a      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_RCC_OscConfig+0x658>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d10d      	bne.n	8002f50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d106      	bne.n	8002f50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	42470060 	.word	0x42470060

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b02      	ldr	r3, [pc, #8]	; (8002f78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000000 	.word	0x20000000

08002f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f80:	f7ff fff2 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	08003e1c 	.word	0x08003e1c

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa8:	f7ff ffde 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0adb      	lsrs	r3, r3, #11
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	08003e1c 	.word	0x08003e1c

08002fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d12c      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e016      	b.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003006:	6253      	str	r3, [r2, #36]	; 0x24
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800301c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003030:	d105      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003038:	d101      	bne.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800303a:	2301      	movs	r3, #1
 800303c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 0201 	bic.w	r2, r3, #1
 8003058:	490b      	ldr	r1, [pc, #44]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e042      	b.n	8003124 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd ff7a 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f91d 	bl	8003310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	d16d      	bne.n	8003228 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_UART_Transmit+0x2c>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e066      	b.n	800322a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2221      	movs	r2, #33	; 0x21
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800316a:	f7fd ffed 	bl	8001148 <HAL_GetTick>
 800316e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d108      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e003      	b.n	80031a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a0:	e02a      	b.n	80031f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f840 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e036      	b.n	800322a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	3302      	adds	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e007      	b.n	80031ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1cf      	bne.n	80031a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f810 	bl	8003232 <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e006      	b.n	800322a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b090      	sub	sp, #64	; 0x40
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003242:	e050      	b.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d04c      	beq.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800324c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x30>
 8003252:	f7fd ff79 	bl	8001148 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800325e:	429a      	cmp	r2, r3
 8003260:	d241      	bcs.n	80032e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003282:	637a      	str	r2, [r7, #52]	; 0x34
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e5      	bne.n	8003262 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3314      	adds	r3, #20
 800329c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	613b      	str	r3, [r7, #16]
   return(result);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3314      	adds	r3, #20
 80032b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b6:	623a      	str	r2, [r7, #32]
 80032b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	69f9      	ldr	r1, [r7, #28]
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e5      	bne.n	8003296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e00f      	b.n	8003306 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	429a      	cmp	r2, r3
 8003302:	d09f      	beq.n	8003244 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3740      	adds	r7, #64	; 0x40
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4313      	orrs	r3, r2
 8003344:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003350:	f023 030c 	bic.w	r3, r3, #12
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	430b      	orrs	r3, r1
 800335c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a55      	ldr	r2, [pc, #340]	; (80034d0 <UART_SetConfig+0x1c0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d103      	bne.n	8003386 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800337e:	f7ff fe11 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	e002      	b.n	800338c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003386:	f7ff fdf9 	bl	8002f7c <HAL_RCC_GetPCLK1Freq>
 800338a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d14c      	bne.n	8003430 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <UART_SetConfig+0x1c4>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	0119      	lsls	r1, r3, #4
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009a      	lsls	r2, r3, #2
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <UART_SetConfig+0x1c4>)
 80033ce:	fba3 0302 	umull	r0, r3, r3, r2
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2064      	movs	r0, #100	; 0x64
 80033d6:	fb00 f303 	mul.w	r3, r0, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	3332      	adds	r3, #50	; 0x32
 80033e0:	4a3c      	ldr	r2, [pc, #240]	; (80034d4 <UART_SetConfig+0x1c4>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033ee:	4419      	add	r1, r3
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fbb2 f2f3 	udiv	r2, r2, r3
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <UART_SetConfig+0x1c4>)
 8003408:	fba3 0302 	umull	r0, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2064      	movs	r0, #100	; 0x64
 8003410:	fb00 f303 	mul.w	r3, r0, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <UART_SetConfig+0x1c4>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 0207 	and.w	r2, r3, #7
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	440a      	add	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800342e:	e04a      	b.n	80034c6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009a      	lsls	r2, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <UART_SetConfig+0x1c4>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	0119      	lsls	r1, r3, #4
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009a      	lsls	r2, r3, #2
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	fbb2 f2f3 	udiv	r2, r2, r3
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <UART_SetConfig+0x1c4>)
 8003468:	fba3 0302 	umull	r0, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	2064      	movs	r0, #100	; 0x64
 8003470:	fb00 f303 	mul.w	r3, r0, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	3332      	adds	r3, #50	; 0x32
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <UART_SetConfig+0x1c4>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003486:	4419      	add	r1, r3
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	fbb2 f2f3 	udiv	r2, r2, r3
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <UART_SetConfig+0x1c4>)
 80034a0:	fba3 0302 	umull	r0, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2064      	movs	r0, #100	; 0x64
 80034a8:	fb00 f303 	mul.w	r3, r0, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <UART_SetConfig+0x1c4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	440a      	add	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40013800 	.word	0x40013800
 80034d4:	51eb851f 	.word	0x51eb851f

080034d8 <__errno>:
 80034d8:	4b01      	ldr	r3, [pc, #4]	; (80034e0 <__errno+0x8>)
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	2600      	movs	r6, #0
 80034e8:	4d0c      	ldr	r5, [pc, #48]	; (800351c <__libc_init_array+0x38>)
 80034ea:	4c0d      	ldr	r4, [pc, #52]	; (8003520 <__libc_init_array+0x3c>)
 80034ec:	1b64      	subs	r4, r4, r5
 80034ee:	10a4      	asrs	r4, r4, #2
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	f000 fc5c 	bl	8003db0 <_init>
 80034f8:	2600      	movs	r6, #0
 80034fa:	4d0a      	ldr	r5, [pc, #40]	; (8003524 <__libc_init_array+0x40>)
 80034fc:	4c0a      	ldr	r4, [pc, #40]	; (8003528 <__libc_init_array+0x44>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	f855 3b04 	ldr.w	r3, [r5], #4
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	f855 3b04 	ldr.w	r3, [r5], #4
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	08003e58 	.word	0x08003e58
 8003520:	08003e58 	.word	0x08003e58
 8003524:	08003e58 	.word	0x08003e58
 8003528:	08003e5c 	.word	0x08003e5c

0800352c <memset>:
 800352c:	4603      	mov	r3, r0
 800352e:	4402      	add	r2, r0
 8003530:	4293      	cmp	r3, r2
 8003532:	d100      	bne.n	8003536 <memset+0xa>
 8003534:	4770      	bx	lr
 8003536:	f803 1b01 	strb.w	r1, [r3], #1
 800353a:	e7f9      	b.n	8003530 <memset+0x4>

0800353c <siprintf>:
 800353c:	b40e      	push	{r1, r2, r3}
 800353e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003542:	b500      	push	{lr}
 8003544:	b09c      	sub	sp, #112	; 0x70
 8003546:	ab1d      	add	r3, sp, #116	; 0x74
 8003548:	9002      	str	r0, [sp, #8]
 800354a:	9006      	str	r0, [sp, #24]
 800354c:	9107      	str	r1, [sp, #28]
 800354e:	9104      	str	r1, [sp, #16]
 8003550:	4808      	ldr	r0, [pc, #32]	; (8003574 <siprintf+0x38>)
 8003552:	4909      	ldr	r1, [pc, #36]	; (8003578 <siprintf+0x3c>)
 8003554:	f853 2b04 	ldr.w	r2, [r3], #4
 8003558:	9105      	str	r1, [sp, #20]
 800355a:	6800      	ldr	r0, [r0, #0]
 800355c:	a902      	add	r1, sp, #8
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	f000 f868 	bl	8003634 <_svfiprintf_r>
 8003564:	2200      	movs	r2, #0
 8003566:	9b02      	ldr	r3, [sp, #8]
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	b01c      	add	sp, #112	; 0x70
 800356c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003570:	b003      	add	sp, #12
 8003572:	4770      	bx	lr
 8003574:	2000000c 	.word	0x2000000c
 8003578:	ffff0208 	.word	0xffff0208

0800357c <__ssputs_r>:
 800357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003580:	688e      	ldr	r6, [r1, #8]
 8003582:	4682      	mov	sl, r0
 8003584:	429e      	cmp	r6, r3
 8003586:	460c      	mov	r4, r1
 8003588:	4690      	mov	r8, r2
 800358a:	461f      	mov	r7, r3
 800358c:	d838      	bhi.n	8003600 <__ssputs_r+0x84>
 800358e:	898a      	ldrh	r2, [r1, #12]
 8003590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003594:	d032      	beq.n	80035fc <__ssputs_r+0x80>
 8003596:	6825      	ldr	r5, [r4, #0]
 8003598:	6909      	ldr	r1, [r1, #16]
 800359a:	3301      	adds	r3, #1
 800359c:	eba5 0901 	sub.w	r9, r5, r1
 80035a0:	6965      	ldr	r5, [r4, #20]
 80035a2:	444b      	add	r3, r9
 80035a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035ac:	106d      	asrs	r5, r5, #1
 80035ae:	429d      	cmp	r5, r3
 80035b0:	bf38      	it	cc
 80035b2:	461d      	movcc	r5, r3
 80035b4:	0553      	lsls	r3, r2, #21
 80035b6:	d531      	bpl.n	800361c <__ssputs_r+0xa0>
 80035b8:	4629      	mov	r1, r5
 80035ba:	f000 fb53 	bl	8003c64 <_malloc_r>
 80035be:	4606      	mov	r6, r0
 80035c0:	b950      	cbnz	r0, 80035d8 <__ssputs_r+0x5c>
 80035c2:	230c      	movs	r3, #12
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	f8ca 3000 	str.w	r3, [sl]
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d8:	464a      	mov	r2, r9
 80035da:	6921      	ldr	r1, [r4, #16]
 80035dc:	f000 face 	bl	8003b7c <memcpy>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ea:	81a3      	strh	r3, [r4, #12]
 80035ec:	6126      	str	r6, [r4, #16]
 80035ee:	444e      	add	r6, r9
 80035f0:	6026      	str	r6, [r4, #0]
 80035f2:	463e      	mov	r6, r7
 80035f4:	6165      	str	r5, [r4, #20]
 80035f6:	eba5 0509 	sub.w	r5, r5, r9
 80035fa:	60a5      	str	r5, [r4, #8]
 80035fc:	42be      	cmp	r6, r7
 80035fe:	d900      	bls.n	8003602 <__ssputs_r+0x86>
 8003600:	463e      	mov	r6, r7
 8003602:	4632      	mov	r2, r6
 8003604:	4641      	mov	r1, r8
 8003606:	6820      	ldr	r0, [r4, #0]
 8003608:	f000 fac6 	bl	8003b98 <memmove>
 800360c:	68a3      	ldr	r3, [r4, #8]
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	1b9b      	subs	r3, r3, r6
 8003612:	4432      	add	r2, r6
 8003614:	2000      	movs	r0, #0
 8003616:	60a3      	str	r3, [r4, #8]
 8003618:	6022      	str	r2, [r4, #0]
 800361a:	e7db      	b.n	80035d4 <__ssputs_r+0x58>
 800361c:	462a      	mov	r2, r5
 800361e:	f000 fb7b 	bl	8003d18 <_realloc_r>
 8003622:	4606      	mov	r6, r0
 8003624:	2800      	cmp	r0, #0
 8003626:	d1e1      	bne.n	80035ec <__ssputs_r+0x70>
 8003628:	4650      	mov	r0, sl
 800362a:	6921      	ldr	r1, [r4, #16]
 800362c:	f000 face 	bl	8003bcc <_free_r>
 8003630:	e7c7      	b.n	80035c2 <__ssputs_r+0x46>
	...

08003634 <_svfiprintf_r>:
 8003634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003638:	4698      	mov	r8, r3
 800363a:	898b      	ldrh	r3, [r1, #12]
 800363c:	4607      	mov	r7, r0
 800363e:	061b      	lsls	r3, r3, #24
 8003640:	460d      	mov	r5, r1
 8003642:	4614      	mov	r4, r2
 8003644:	b09d      	sub	sp, #116	; 0x74
 8003646:	d50e      	bpl.n	8003666 <_svfiprintf_r+0x32>
 8003648:	690b      	ldr	r3, [r1, #16]
 800364a:	b963      	cbnz	r3, 8003666 <_svfiprintf_r+0x32>
 800364c:	2140      	movs	r1, #64	; 0x40
 800364e:	f000 fb09 	bl	8003c64 <_malloc_r>
 8003652:	6028      	str	r0, [r5, #0]
 8003654:	6128      	str	r0, [r5, #16]
 8003656:	b920      	cbnz	r0, 8003662 <_svfiprintf_r+0x2e>
 8003658:	230c      	movs	r3, #12
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	e0d1      	b.n	8003806 <_svfiprintf_r+0x1d2>
 8003662:	2340      	movs	r3, #64	; 0x40
 8003664:	616b      	str	r3, [r5, #20]
 8003666:	2300      	movs	r3, #0
 8003668:	9309      	str	r3, [sp, #36]	; 0x24
 800366a:	2320      	movs	r3, #32
 800366c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003670:	2330      	movs	r3, #48	; 0x30
 8003672:	f04f 0901 	mov.w	r9, #1
 8003676:	f8cd 800c 	str.w	r8, [sp, #12]
 800367a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003820 <_svfiprintf_r+0x1ec>
 800367e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003682:	4623      	mov	r3, r4
 8003684:	469a      	mov	sl, r3
 8003686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800368a:	b10a      	cbz	r2, 8003690 <_svfiprintf_r+0x5c>
 800368c:	2a25      	cmp	r2, #37	; 0x25
 800368e:	d1f9      	bne.n	8003684 <_svfiprintf_r+0x50>
 8003690:	ebba 0b04 	subs.w	fp, sl, r4
 8003694:	d00b      	beq.n	80036ae <_svfiprintf_r+0x7a>
 8003696:	465b      	mov	r3, fp
 8003698:	4622      	mov	r2, r4
 800369a:	4629      	mov	r1, r5
 800369c:	4638      	mov	r0, r7
 800369e:	f7ff ff6d 	bl	800357c <__ssputs_r>
 80036a2:	3001      	adds	r0, #1
 80036a4:	f000 80aa 	beq.w	80037fc <_svfiprintf_r+0x1c8>
 80036a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036aa:	445a      	add	r2, fp
 80036ac:	9209      	str	r2, [sp, #36]	; 0x24
 80036ae:	f89a 3000 	ldrb.w	r3, [sl]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80a2 	beq.w	80037fc <_svfiprintf_r+0x1c8>
 80036b8:	2300      	movs	r3, #0
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295
 80036be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c2:	f10a 0a01 	add.w	sl, sl, #1
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	9307      	str	r3, [sp, #28]
 80036ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ce:	931a      	str	r3, [sp, #104]	; 0x68
 80036d0:	4654      	mov	r4, sl
 80036d2:	2205      	movs	r2, #5
 80036d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d8:	4851      	ldr	r0, [pc, #324]	; (8003820 <_svfiprintf_r+0x1ec>)
 80036da:	f000 fa41 	bl	8003b60 <memchr>
 80036de:	9a04      	ldr	r2, [sp, #16]
 80036e0:	b9d8      	cbnz	r0, 800371a <_svfiprintf_r+0xe6>
 80036e2:	06d0      	lsls	r0, r2, #27
 80036e4:	bf44      	itt	mi
 80036e6:	2320      	movmi	r3, #32
 80036e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ec:	0711      	lsls	r1, r2, #28
 80036ee:	bf44      	itt	mi
 80036f0:	232b      	movmi	r3, #43	; 0x2b
 80036f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036f6:	f89a 3000 	ldrb.w	r3, [sl]
 80036fa:	2b2a      	cmp	r3, #42	; 0x2a
 80036fc:	d015      	beq.n	800372a <_svfiprintf_r+0xf6>
 80036fe:	4654      	mov	r4, sl
 8003700:	2000      	movs	r0, #0
 8003702:	f04f 0c0a 	mov.w	ip, #10
 8003706:	9a07      	ldr	r2, [sp, #28]
 8003708:	4621      	mov	r1, r4
 800370a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800370e:	3b30      	subs	r3, #48	; 0x30
 8003710:	2b09      	cmp	r3, #9
 8003712:	d94e      	bls.n	80037b2 <_svfiprintf_r+0x17e>
 8003714:	b1b0      	cbz	r0, 8003744 <_svfiprintf_r+0x110>
 8003716:	9207      	str	r2, [sp, #28]
 8003718:	e014      	b.n	8003744 <_svfiprintf_r+0x110>
 800371a:	eba0 0308 	sub.w	r3, r0, r8
 800371e:	fa09 f303 	lsl.w	r3, r9, r3
 8003722:	4313      	orrs	r3, r2
 8003724:	46a2      	mov	sl, r4
 8003726:	9304      	str	r3, [sp, #16]
 8003728:	e7d2      	b.n	80036d0 <_svfiprintf_r+0x9c>
 800372a:	9b03      	ldr	r3, [sp, #12]
 800372c:	1d19      	adds	r1, r3, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	9103      	str	r1, [sp, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	bfbb      	ittet	lt
 8003736:	425b      	neglt	r3, r3
 8003738:	f042 0202 	orrlt.w	r2, r2, #2
 800373c:	9307      	strge	r3, [sp, #28]
 800373e:	9307      	strlt	r3, [sp, #28]
 8003740:	bfb8      	it	lt
 8003742:	9204      	strlt	r2, [sp, #16]
 8003744:	7823      	ldrb	r3, [r4, #0]
 8003746:	2b2e      	cmp	r3, #46	; 0x2e
 8003748:	d10c      	bne.n	8003764 <_svfiprintf_r+0x130>
 800374a:	7863      	ldrb	r3, [r4, #1]
 800374c:	2b2a      	cmp	r3, #42	; 0x2a
 800374e:	d135      	bne.n	80037bc <_svfiprintf_r+0x188>
 8003750:	9b03      	ldr	r3, [sp, #12]
 8003752:	3402      	adds	r4, #2
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	9203      	str	r2, [sp, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	bfb8      	it	lt
 800375e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003762:	9305      	str	r3, [sp, #20]
 8003764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003830 <_svfiprintf_r+0x1fc>
 8003768:	2203      	movs	r2, #3
 800376a:	4650      	mov	r0, sl
 800376c:	7821      	ldrb	r1, [r4, #0]
 800376e:	f000 f9f7 	bl	8003b60 <memchr>
 8003772:	b140      	cbz	r0, 8003786 <_svfiprintf_r+0x152>
 8003774:	2340      	movs	r3, #64	; 0x40
 8003776:	eba0 000a 	sub.w	r0, r0, sl
 800377a:	fa03 f000 	lsl.w	r0, r3, r0
 800377e:	9b04      	ldr	r3, [sp, #16]
 8003780:	3401      	adds	r4, #1
 8003782:	4303      	orrs	r3, r0
 8003784:	9304      	str	r3, [sp, #16]
 8003786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378a:	2206      	movs	r2, #6
 800378c:	4825      	ldr	r0, [pc, #148]	; (8003824 <_svfiprintf_r+0x1f0>)
 800378e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003792:	f000 f9e5 	bl	8003b60 <memchr>
 8003796:	2800      	cmp	r0, #0
 8003798:	d038      	beq.n	800380c <_svfiprintf_r+0x1d8>
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <_svfiprintf_r+0x1f4>)
 800379c:	bb1b      	cbnz	r3, 80037e6 <_svfiprintf_r+0x1b2>
 800379e:	9b03      	ldr	r3, [sp, #12]
 80037a0:	3307      	adds	r3, #7
 80037a2:	f023 0307 	bic.w	r3, r3, #7
 80037a6:	3308      	adds	r3, #8
 80037a8:	9303      	str	r3, [sp, #12]
 80037aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ac:	4433      	add	r3, r6
 80037ae:	9309      	str	r3, [sp, #36]	; 0x24
 80037b0:	e767      	b.n	8003682 <_svfiprintf_r+0x4e>
 80037b2:	460c      	mov	r4, r1
 80037b4:	2001      	movs	r0, #1
 80037b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ba:	e7a5      	b.n	8003708 <_svfiprintf_r+0xd4>
 80037bc:	2300      	movs	r3, #0
 80037be:	f04f 0c0a 	mov.w	ip, #10
 80037c2:	4619      	mov	r1, r3
 80037c4:	3401      	adds	r4, #1
 80037c6:	9305      	str	r3, [sp, #20]
 80037c8:	4620      	mov	r0, r4
 80037ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ce:	3a30      	subs	r2, #48	; 0x30
 80037d0:	2a09      	cmp	r2, #9
 80037d2:	d903      	bls.n	80037dc <_svfiprintf_r+0x1a8>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0c5      	beq.n	8003764 <_svfiprintf_r+0x130>
 80037d8:	9105      	str	r1, [sp, #20]
 80037da:	e7c3      	b.n	8003764 <_svfiprintf_r+0x130>
 80037dc:	4604      	mov	r4, r0
 80037de:	2301      	movs	r3, #1
 80037e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e4:	e7f0      	b.n	80037c8 <_svfiprintf_r+0x194>
 80037e6:	ab03      	add	r3, sp, #12
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	462a      	mov	r2, r5
 80037ec:	4638      	mov	r0, r7
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <_svfiprintf_r+0x1f8>)
 80037f0:	a904      	add	r1, sp, #16
 80037f2:	f3af 8000 	nop.w
 80037f6:	1c42      	adds	r2, r0, #1
 80037f8:	4606      	mov	r6, r0
 80037fa:	d1d6      	bne.n	80037aa <_svfiprintf_r+0x176>
 80037fc:	89ab      	ldrh	r3, [r5, #12]
 80037fe:	065b      	lsls	r3, r3, #25
 8003800:	f53f af2c 	bmi.w	800365c <_svfiprintf_r+0x28>
 8003804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003806:	b01d      	add	sp, #116	; 0x74
 8003808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380c:	ab03      	add	r3, sp, #12
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	462a      	mov	r2, r5
 8003812:	4638      	mov	r0, r7
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <_svfiprintf_r+0x1f8>)
 8003816:	a904      	add	r1, sp, #16
 8003818:	f000 f87c 	bl	8003914 <_printf_i>
 800381c:	e7eb      	b.n	80037f6 <_svfiprintf_r+0x1c2>
 800381e:	bf00      	nop
 8003820:	08003e24 	.word	0x08003e24
 8003824:	08003e2e 	.word	0x08003e2e
 8003828:	00000000 	.word	0x00000000
 800382c:	0800357d 	.word	0x0800357d
 8003830:	08003e2a 	.word	0x08003e2a

08003834 <_printf_common>:
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	4616      	mov	r6, r2
 800383a:	4699      	mov	r9, r3
 800383c:	688a      	ldr	r2, [r1, #8]
 800383e:	690b      	ldr	r3, [r1, #16]
 8003840:	4607      	mov	r7, r0
 8003842:	4293      	cmp	r3, r2
 8003844:	bfb8      	it	lt
 8003846:	4613      	movlt	r3, r2
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800384e:	460c      	mov	r4, r1
 8003850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003854:	b10a      	cbz	r2, 800385a <_printf_common+0x26>
 8003856:	3301      	adds	r3, #1
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	0699      	lsls	r1, r3, #26
 800385e:	bf42      	ittt	mi
 8003860:	6833      	ldrmi	r3, [r6, #0]
 8003862:	3302      	addmi	r3, #2
 8003864:	6033      	strmi	r3, [r6, #0]
 8003866:	6825      	ldr	r5, [r4, #0]
 8003868:	f015 0506 	ands.w	r5, r5, #6
 800386c:	d106      	bne.n	800387c <_printf_common+0x48>
 800386e:	f104 0a19 	add.w	sl, r4, #25
 8003872:	68e3      	ldr	r3, [r4, #12]
 8003874:	6832      	ldr	r2, [r6, #0]
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	42ab      	cmp	r3, r5
 800387a:	dc28      	bgt.n	80038ce <_printf_common+0x9a>
 800387c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003880:	1e13      	subs	r3, r2, #0
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	bf18      	it	ne
 8003886:	2301      	movne	r3, #1
 8003888:	0692      	lsls	r2, r2, #26
 800388a:	d42d      	bmi.n	80038e8 <_printf_common+0xb4>
 800388c:	4649      	mov	r1, r9
 800388e:	4638      	mov	r0, r7
 8003890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003894:	47c0      	blx	r8
 8003896:	3001      	adds	r0, #1
 8003898:	d020      	beq.n	80038dc <_printf_common+0xa8>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	68e5      	ldr	r5, [r4, #12]
 800389e:	f003 0306 	and.w	r3, r3, #6
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf18      	it	ne
 80038a6:	2500      	movne	r5, #0
 80038a8:	6832      	ldr	r2, [r6, #0]
 80038aa:	f04f 0600 	mov.w	r6, #0
 80038ae:	68a3      	ldr	r3, [r4, #8]
 80038b0:	bf08      	it	eq
 80038b2:	1aad      	subeq	r5, r5, r2
 80038b4:	6922      	ldr	r2, [r4, #16]
 80038b6:	bf08      	it	eq
 80038b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038bc:	4293      	cmp	r3, r2
 80038be:	bfc4      	itt	gt
 80038c0:	1a9b      	subgt	r3, r3, r2
 80038c2:	18ed      	addgt	r5, r5, r3
 80038c4:	341a      	adds	r4, #26
 80038c6:	42b5      	cmp	r5, r6
 80038c8:	d11a      	bne.n	8003900 <_printf_common+0xcc>
 80038ca:	2000      	movs	r0, #0
 80038cc:	e008      	b.n	80038e0 <_printf_common+0xac>
 80038ce:	2301      	movs	r3, #1
 80038d0:	4652      	mov	r2, sl
 80038d2:	4649      	mov	r1, r9
 80038d4:	4638      	mov	r0, r7
 80038d6:	47c0      	blx	r8
 80038d8:	3001      	adds	r0, #1
 80038da:	d103      	bne.n	80038e4 <_printf_common+0xb0>
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e4:	3501      	adds	r5, #1
 80038e6:	e7c4      	b.n	8003872 <_printf_common+0x3e>
 80038e8:	2030      	movs	r0, #48	; 0x30
 80038ea:	18e1      	adds	r1, r4, r3
 80038ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038f6:	4422      	add	r2, r4
 80038f8:	3302      	adds	r3, #2
 80038fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038fe:	e7c5      	b.n	800388c <_printf_common+0x58>
 8003900:	2301      	movs	r3, #1
 8003902:	4622      	mov	r2, r4
 8003904:	4649      	mov	r1, r9
 8003906:	4638      	mov	r0, r7
 8003908:	47c0      	blx	r8
 800390a:	3001      	adds	r0, #1
 800390c:	d0e6      	beq.n	80038dc <_printf_common+0xa8>
 800390e:	3601      	adds	r6, #1
 8003910:	e7d9      	b.n	80038c6 <_printf_common+0x92>
	...

08003914 <_printf_i>:
 8003914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	460c      	mov	r4, r1
 800391a:	7e27      	ldrb	r7, [r4, #24]
 800391c:	4691      	mov	r9, r2
 800391e:	2f78      	cmp	r7, #120	; 0x78
 8003920:	4680      	mov	r8, r0
 8003922:	469a      	mov	sl, r3
 8003924:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003926:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800392a:	d807      	bhi.n	800393c <_printf_i+0x28>
 800392c:	2f62      	cmp	r7, #98	; 0x62
 800392e:	d80a      	bhi.n	8003946 <_printf_i+0x32>
 8003930:	2f00      	cmp	r7, #0
 8003932:	f000 80d9 	beq.w	8003ae8 <_printf_i+0x1d4>
 8003936:	2f58      	cmp	r7, #88	; 0x58
 8003938:	f000 80a4 	beq.w	8003a84 <_printf_i+0x170>
 800393c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003944:	e03a      	b.n	80039bc <_printf_i+0xa8>
 8003946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800394a:	2b15      	cmp	r3, #21
 800394c:	d8f6      	bhi.n	800393c <_printf_i+0x28>
 800394e:	a001      	add	r0, pc, #4	; (adr r0, 8003954 <_printf_i+0x40>)
 8003950:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003954:	080039ad 	.word	0x080039ad
 8003958:	080039c1 	.word	0x080039c1
 800395c:	0800393d 	.word	0x0800393d
 8003960:	0800393d 	.word	0x0800393d
 8003964:	0800393d 	.word	0x0800393d
 8003968:	0800393d 	.word	0x0800393d
 800396c:	080039c1 	.word	0x080039c1
 8003970:	0800393d 	.word	0x0800393d
 8003974:	0800393d 	.word	0x0800393d
 8003978:	0800393d 	.word	0x0800393d
 800397c:	0800393d 	.word	0x0800393d
 8003980:	08003acf 	.word	0x08003acf
 8003984:	080039f1 	.word	0x080039f1
 8003988:	08003ab1 	.word	0x08003ab1
 800398c:	0800393d 	.word	0x0800393d
 8003990:	0800393d 	.word	0x0800393d
 8003994:	08003af1 	.word	0x08003af1
 8003998:	0800393d 	.word	0x0800393d
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	0800393d 	.word	0x0800393d
 80039a4:	0800393d 	.word	0x0800393d
 80039a8:	08003ab9 	.word	0x08003ab9
 80039ac:	680b      	ldr	r3, [r1, #0]
 80039ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039b2:	1d1a      	adds	r2, r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	600a      	str	r2, [r1, #0]
 80039b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039bc:	2301      	movs	r3, #1
 80039be:	e0a4      	b.n	8003b0a <_printf_i+0x1f6>
 80039c0:	6825      	ldr	r5, [r4, #0]
 80039c2:	6808      	ldr	r0, [r1, #0]
 80039c4:	062e      	lsls	r6, r5, #24
 80039c6:	f100 0304 	add.w	r3, r0, #4
 80039ca:	d50a      	bpl.n	80039e2 <_printf_i+0xce>
 80039cc:	6805      	ldr	r5, [r0, #0]
 80039ce:	600b      	str	r3, [r1, #0]
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	da03      	bge.n	80039dc <_printf_i+0xc8>
 80039d4:	232d      	movs	r3, #45	; 0x2d
 80039d6:	426d      	negs	r5, r5
 80039d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039dc:	230a      	movs	r3, #10
 80039de:	485e      	ldr	r0, [pc, #376]	; (8003b58 <_printf_i+0x244>)
 80039e0:	e019      	b.n	8003a16 <_printf_i+0x102>
 80039e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039e6:	6805      	ldr	r5, [r0, #0]
 80039e8:	600b      	str	r3, [r1, #0]
 80039ea:	bf18      	it	ne
 80039ec:	b22d      	sxthne	r5, r5
 80039ee:	e7ef      	b.n	80039d0 <_printf_i+0xbc>
 80039f0:	680b      	ldr	r3, [r1, #0]
 80039f2:	6825      	ldr	r5, [r4, #0]
 80039f4:	1d18      	adds	r0, r3, #4
 80039f6:	6008      	str	r0, [r1, #0]
 80039f8:	0628      	lsls	r0, r5, #24
 80039fa:	d501      	bpl.n	8003a00 <_printf_i+0xec>
 80039fc:	681d      	ldr	r5, [r3, #0]
 80039fe:	e002      	b.n	8003a06 <_printf_i+0xf2>
 8003a00:	0669      	lsls	r1, r5, #25
 8003a02:	d5fb      	bpl.n	80039fc <_printf_i+0xe8>
 8003a04:	881d      	ldrh	r5, [r3, #0]
 8003a06:	2f6f      	cmp	r7, #111	; 0x6f
 8003a08:	bf0c      	ite	eq
 8003a0a:	2308      	moveq	r3, #8
 8003a0c:	230a      	movne	r3, #10
 8003a0e:	4852      	ldr	r0, [pc, #328]	; (8003b58 <_printf_i+0x244>)
 8003a10:	2100      	movs	r1, #0
 8003a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a16:	6866      	ldr	r6, [r4, #4]
 8003a18:	2e00      	cmp	r6, #0
 8003a1a:	bfa8      	it	ge
 8003a1c:	6821      	ldrge	r1, [r4, #0]
 8003a1e:	60a6      	str	r6, [r4, #8]
 8003a20:	bfa4      	itt	ge
 8003a22:	f021 0104 	bicge.w	r1, r1, #4
 8003a26:	6021      	strge	r1, [r4, #0]
 8003a28:	b90d      	cbnz	r5, 8003a2e <_printf_i+0x11a>
 8003a2a:	2e00      	cmp	r6, #0
 8003a2c:	d04d      	beq.n	8003aca <_printf_i+0x1b6>
 8003a2e:	4616      	mov	r6, r2
 8003a30:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a34:	fb03 5711 	mls	r7, r3, r1, r5
 8003a38:	5dc7      	ldrb	r7, [r0, r7]
 8003a3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a3e:	462f      	mov	r7, r5
 8003a40:	42bb      	cmp	r3, r7
 8003a42:	460d      	mov	r5, r1
 8003a44:	d9f4      	bls.n	8003a30 <_printf_i+0x11c>
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d10b      	bne.n	8003a62 <_printf_i+0x14e>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	07df      	lsls	r7, r3, #31
 8003a4e:	d508      	bpl.n	8003a62 <_printf_i+0x14e>
 8003a50:	6923      	ldr	r3, [r4, #16]
 8003a52:	6861      	ldr	r1, [r4, #4]
 8003a54:	4299      	cmp	r1, r3
 8003a56:	bfde      	ittt	le
 8003a58:	2330      	movle	r3, #48	; 0x30
 8003a5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a62:	1b92      	subs	r2, r2, r6
 8003a64:	6122      	str	r2, [r4, #16]
 8003a66:	464b      	mov	r3, r9
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4640      	mov	r0, r8
 8003a6c:	f8cd a000 	str.w	sl, [sp]
 8003a70:	aa03      	add	r2, sp, #12
 8003a72:	f7ff fedf 	bl	8003834 <_printf_common>
 8003a76:	3001      	adds	r0, #1
 8003a78:	d14c      	bne.n	8003b14 <_printf_i+0x200>
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	b004      	add	sp, #16
 8003a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a84:	4834      	ldr	r0, [pc, #208]	; (8003b58 <_printf_i+0x244>)
 8003a86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a8a:	680e      	ldr	r6, [r1, #0]
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a92:	061f      	lsls	r7, r3, #24
 8003a94:	600e      	str	r6, [r1, #0]
 8003a96:	d514      	bpl.n	8003ac2 <_printf_i+0x1ae>
 8003a98:	07d9      	lsls	r1, r3, #31
 8003a9a:	bf44      	itt	mi
 8003a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa0:	6023      	strmi	r3, [r4, #0]
 8003aa2:	b91d      	cbnz	r5, 8003aac <_printf_i+0x198>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f023 0320 	bic.w	r3, r3, #32
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	2310      	movs	r3, #16
 8003aae:	e7af      	b.n	8003a10 <_printf_i+0xfc>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	f043 0320 	orr.w	r3, r3, #32
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	2378      	movs	r3, #120	; 0x78
 8003aba:	4828      	ldr	r0, [pc, #160]	; (8003b5c <_printf_i+0x248>)
 8003abc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ac0:	e7e3      	b.n	8003a8a <_printf_i+0x176>
 8003ac2:	065e      	lsls	r6, r3, #25
 8003ac4:	bf48      	it	mi
 8003ac6:	b2ad      	uxthmi	r5, r5
 8003ac8:	e7e6      	b.n	8003a98 <_printf_i+0x184>
 8003aca:	4616      	mov	r6, r2
 8003acc:	e7bb      	b.n	8003a46 <_printf_i+0x132>
 8003ace:	680b      	ldr	r3, [r1, #0]
 8003ad0:	6826      	ldr	r6, [r4, #0]
 8003ad2:	1d1d      	adds	r5, r3, #4
 8003ad4:	6960      	ldr	r0, [r4, #20]
 8003ad6:	600d      	str	r5, [r1, #0]
 8003ad8:	0635      	lsls	r5, r6, #24
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	d501      	bpl.n	8003ae2 <_printf_i+0x1ce>
 8003ade:	6018      	str	r0, [r3, #0]
 8003ae0:	e002      	b.n	8003ae8 <_printf_i+0x1d4>
 8003ae2:	0671      	lsls	r1, r6, #25
 8003ae4:	d5fb      	bpl.n	8003ade <_printf_i+0x1ca>
 8003ae6:	8018      	strh	r0, [r3, #0]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4616      	mov	r6, r2
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	e7ba      	b.n	8003a66 <_printf_i+0x152>
 8003af0:	680b      	ldr	r3, [r1, #0]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	600a      	str	r2, [r1, #0]
 8003af6:	681e      	ldr	r6, [r3, #0]
 8003af8:	2100      	movs	r1, #0
 8003afa:	4630      	mov	r0, r6
 8003afc:	6862      	ldr	r2, [r4, #4]
 8003afe:	f000 f82f 	bl	8003b60 <memchr>
 8003b02:	b108      	cbz	r0, 8003b08 <_printf_i+0x1f4>
 8003b04:	1b80      	subs	r0, r0, r6
 8003b06:	6060      	str	r0, [r4, #4]
 8003b08:	6863      	ldr	r3, [r4, #4]
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b12:	e7a8      	b.n	8003a66 <_printf_i+0x152>
 8003b14:	4632      	mov	r2, r6
 8003b16:	4649      	mov	r1, r9
 8003b18:	4640      	mov	r0, r8
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	47d0      	blx	sl
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d0ab      	beq.n	8003a7a <_printf_i+0x166>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	079b      	lsls	r3, r3, #30
 8003b26:	d413      	bmi.n	8003b50 <_printf_i+0x23c>
 8003b28:	68e0      	ldr	r0, [r4, #12]
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	4298      	cmp	r0, r3
 8003b2e:	bfb8      	it	lt
 8003b30:	4618      	movlt	r0, r3
 8003b32:	e7a4      	b.n	8003a7e <_printf_i+0x16a>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4632      	mov	r2, r6
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	47d0      	blx	sl
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d09b      	beq.n	8003a7a <_printf_i+0x166>
 8003b42:	3501      	adds	r5, #1
 8003b44:	68e3      	ldr	r3, [r4, #12]
 8003b46:	9903      	ldr	r1, [sp, #12]
 8003b48:	1a5b      	subs	r3, r3, r1
 8003b4a:	42ab      	cmp	r3, r5
 8003b4c:	dcf2      	bgt.n	8003b34 <_printf_i+0x220>
 8003b4e:	e7eb      	b.n	8003b28 <_printf_i+0x214>
 8003b50:	2500      	movs	r5, #0
 8003b52:	f104 0619 	add.w	r6, r4, #25
 8003b56:	e7f5      	b.n	8003b44 <_printf_i+0x230>
 8003b58:	08003e35 	.word	0x08003e35
 8003b5c:	08003e46 	.word	0x08003e46

08003b60 <memchr>:
 8003b60:	4603      	mov	r3, r0
 8003b62:	b510      	push	{r4, lr}
 8003b64:	b2c9      	uxtb	r1, r1
 8003b66:	4402      	add	r2, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	d101      	bne.n	8003b72 <memchr+0x12>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e003      	b.n	8003b7a <memchr+0x1a>
 8003b72:	7804      	ldrb	r4, [r0, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	428c      	cmp	r4, r1
 8003b78:	d1f6      	bne.n	8003b68 <memchr+0x8>
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <memcpy>:
 8003b7c:	440a      	add	r2, r1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b84:	d100      	bne.n	8003b88 <memcpy+0xc>
 8003b86:	4770      	bx	lr
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b8e:	4291      	cmp	r1, r2
 8003b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b94:	d1f9      	bne.n	8003b8a <memcpy+0xe>
 8003b96:	bd10      	pop	{r4, pc}

08003b98 <memmove>:
 8003b98:	4288      	cmp	r0, r1
 8003b9a:	b510      	push	{r4, lr}
 8003b9c:	eb01 0402 	add.w	r4, r1, r2
 8003ba0:	d902      	bls.n	8003ba8 <memmove+0x10>
 8003ba2:	4284      	cmp	r4, r0
 8003ba4:	4623      	mov	r3, r4
 8003ba6:	d807      	bhi.n	8003bb8 <memmove+0x20>
 8003ba8:	1e43      	subs	r3, r0, #1
 8003baa:	42a1      	cmp	r1, r4
 8003bac:	d008      	beq.n	8003bc0 <memmove+0x28>
 8003bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bb6:	e7f8      	b.n	8003baa <memmove+0x12>
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4402      	add	r2, r0
 8003bbc:	428a      	cmp	r2, r1
 8003bbe:	d100      	bne.n	8003bc2 <memmove+0x2a>
 8003bc0:	bd10      	pop	{r4, pc}
 8003bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bca:	e7f7      	b.n	8003bbc <memmove+0x24>

08003bcc <_free_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	4605      	mov	r5, r0
 8003bd0:	2900      	cmp	r1, #0
 8003bd2:	d043      	beq.n	8003c5c <_free_r+0x90>
 8003bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd8:	1f0c      	subs	r4, r1, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfb8      	it	lt
 8003bde:	18e4      	addlt	r4, r4, r3
 8003be0:	f000 f8d0 	bl	8003d84 <__malloc_lock>
 8003be4:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <_free_r+0x94>)
 8003be6:	6813      	ldr	r3, [r2, #0]
 8003be8:	4610      	mov	r0, r2
 8003bea:	b933      	cbnz	r3, 8003bfa <_free_r+0x2e>
 8003bec:	6063      	str	r3, [r4, #4]
 8003bee:	6014      	str	r4, [r2, #0]
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bf6:	f000 b8cb 	b.w	8003d90 <__malloc_unlock>
 8003bfa:	42a3      	cmp	r3, r4
 8003bfc:	d90a      	bls.n	8003c14 <_free_r+0x48>
 8003bfe:	6821      	ldr	r1, [r4, #0]
 8003c00:	1862      	adds	r2, r4, r1
 8003c02:	4293      	cmp	r3, r2
 8003c04:	bf01      	itttt	eq
 8003c06:	681a      	ldreq	r2, [r3, #0]
 8003c08:	685b      	ldreq	r3, [r3, #4]
 8003c0a:	1852      	addeq	r2, r2, r1
 8003c0c:	6022      	streq	r2, [r4, #0]
 8003c0e:	6063      	str	r3, [r4, #4]
 8003c10:	6004      	str	r4, [r0, #0]
 8003c12:	e7ed      	b.n	8003bf0 <_free_r+0x24>
 8003c14:	461a      	mov	r2, r3
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b10b      	cbz	r3, 8003c1e <_free_r+0x52>
 8003c1a:	42a3      	cmp	r3, r4
 8003c1c:	d9fa      	bls.n	8003c14 <_free_r+0x48>
 8003c1e:	6811      	ldr	r1, [r2, #0]
 8003c20:	1850      	adds	r0, r2, r1
 8003c22:	42a0      	cmp	r0, r4
 8003c24:	d10b      	bne.n	8003c3e <_free_r+0x72>
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	4401      	add	r1, r0
 8003c2a:	1850      	adds	r0, r2, r1
 8003c2c:	4283      	cmp	r3, r0
 8003c2e:	6011      	str	r1, [r2, #0]
 8003c30:	d1de      	bne.n	8003bf0 <_free_r+0x24>
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4401      	add	r1, r0
 8003c38:	6011      	str	r1, [r2, #0]
 8003c3a:	6053      	str	r3, [r2, #4]
 8003c3c:	e7d8      	b.n	8003bf0 <_free_r+0x24>
 8003c3e:	d902      	bls.n	8003c46 <_free_r+0x7a>
 8003c40:	230c      	movs	r3, #12
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	e7d4      	b.n	8003bf0 <_free_r+0x24>
 8003c46:	6820      	ldr	r0, [r4, #0]
 8003c48:	1821      	adds	r1, r4, r0
 8003c4a:	428b      	cmp	r3, r1
 8003c4c:	bf01      	itttt	eq
 8003c4e:	6819      	ldreq	r1, [r3, #0]
 8003c50:	685b      	ldreq	r3, [r3, #4]
 8003c52:	1809      	addeq	r1, r1, r0
 8003c54:	6021      	streq	r1, [r4, #0]
 8003c56:	6063      	str	r3, [r4, #4]
 8003c58:	6054      	str	r4, [r2, #4]
 8003c5a:	e7c9      	b.n	8003bf0 <_free_r+0x24>
 8003c5c:	bd38      	pop	{r3, r4, r5, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000094 	.word	0x20000094

08003c64 <_malloc_r>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	1ccd      	adds	r5, r1, #3
 8003c68:	f025 0503 	bic.w	r5, r5, #3
 8003c6c:	3508      	adds	r5, #8
 8003c6e:	2d0c      	cmp	r5, #12
 8003c70:	bf38      	it	cc
 8003c72:	250c      	movcc	r5, #12
 8003c74:	2d00      	cmp	r5, #0
 8003c76:	4606      	mov	r6, r0
 8003c78:	db01      	blt.n	8003c7e <_malloc_r+0x1a>
 8003c7a:	42a9      	cmp	r1, r5
 8003c7c:	d903      	bls.n	8003c86 <_malloc_r+0x22>
 8003c7e:	230c      	movs	r3, #12
 8003c80:	6033      	str	r3, [r6, #0]
 8003c82:	2000      	movs	r0, #0
 8003c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c86:	f000 f87d 	bl	8003d84 <__malloc_lock>
 8003c8a:	4921      	ldr	r1, [pc, #132]	; (8003d10 <_malloc_r+0xac>)
 8003c8c:	680a      	ldr	r2, [r1, #0]
 8003c8e:	4614      	mov	r4, r2
 8003c90:	b99c      	cbnz	r4, 8003cba <_malloc_r+0x56>
 8003c92:	4f20      	ldr	r7, [pc, #128]	; (8003d14 <_malloc_r+0xb0>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	b923      	cbnz	r3, 8003ca2 <_malloc_r+0x3e>
 8003c98:	4621      	mov	r1, r4
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 f862 	bl	8003d64 <_sbrk_r>
 8003ca0:	6038      	str	r0, [r7, #0]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f000 f85d 	bl	8003d64 <_sbrk_r>
 8003caa:	1c43      	adds	r3, r0, #1
 8003cac:	d123      	bne.n	8003cf6 <_malloc_r+0x92>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	6033      	str	r3, [r6, #0]
 8003cb4:	f000 f86c 	bl	8003d90 <__malloc_unlock>
 8003cb8:	e7e3      	b.n	8003c82 <_malloc_r+0x1e>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	1b5b      	subs	r3, r3, r5
 8003cbe:	d417      	bmi.n	8003cf0 <_malloc_r+0x8c>
 8003cc0:	2b0b      	cmp	r3, #11
 8003cc2:	d903      	bls.n	8003ccc <_malloc_r+0x68>
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	441c      	add	r4, r3
 8003cc8:	6025      	str	r5, [r4, #0]
 8003cca:	e004      	b.n	8003cd6 <_malloc_r+0x72>
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	42a2      	cmp	r2, r4
 8003cd0:	bf0c      	ite	eq
 8003cd2:	600b      	streq	r3, [r1, #0]
 8003cd4:	6053      	strne	r3, [r2, #4]
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f000 f85a 	bl	8003d90 <__malloc_unlock>
 8003cdc:	f104 000b 	add.w	r0, r4, #11
 8003ce0:	1d23      	adds	r3, r4, #4
 8003ce2:	f020 0007 	bic.w	r0, r0, #7
 8003ce6:	1ac2      	subs	r2, r0, r3
 8003ce8:	d0cc      	beq.n	8003c84 <_malloc_r+0x20>
 8003cea:	1a1b      	subs	r3, r3, r0
 8003cec:	50a3      	str	r3, [r4, r2]
 8003cee:	e7c9      	b.n	8003c84 <_malloc_r+0x20>
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	6864      	ldr	r4, [r4, #4]
 8003cf4:	e7cc      	b.n	8003c90 <_malloc_r+0x2c>
 8003cf6:	1cc4      	adds	r4, r0, #3
 8003cf8:	f024 0403 	bic.w	r4, r4, #3
 8003cfc:	42a0      	cmp	r0, r4
 8003cfe:	d0e3      	beq.n	8003cc8 <_malloc_r+0x64>
 8003d00:	1a21      	subs	r1, r4, r0
 8003d02:	4630      	mov	r0, r6
 8003d04:	f000 f82e 	bl	8003d64 <_sbrk_r>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d1dd      	bne.n	8003cc8 <_malloc_r+0x64>
 8003d0c:	e7cf      	b.n	8003cae <_malloc_r+0x4a>
 8003d0e:	bf00      	nop
 8003d10:	20000094 	.word	0x20000094
 8003d14:	20000098 	.word	0x20000098

08003d18 <_realloc_r>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	4607      	mov	r7, r0
 8003d1c:	4614      	mov	r4, r2
 8003d1e:	460e      	mov	r6, r1
 8003d20:	b921      	cbnz	r1, 8003d2c <_realloc_r+0x14>
 8003d22:	4611      	mov	r1, r2
 8003d24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d28:	f7ff bf9c 	b.w	8003c64 <_malloc_r>
 8003d2c:	b922      	cbnz	r2, 8003d38 <_realloc_r+0x20>
 8003d2e:	f7ff ff4d 	bl	8003bcc <_free_r>
 8003d32:	4625      	mov	r5, r4
 8003d34:	4628      	mov	r0, r5
 8003d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d38:	f000 f830 	bl	8003d9c <_malloc_usable_size_r>
 8003d3c:	42a0      	cmp	r0, r4
 8003d3e:	d20f      	bcs.n	8003d60 <_realloc_r+0x48>
 8003d40:	4621      	mov	r1, r4
 8003d42:	4638      	mov	r0, r7
 8003d44:	f7ff ff8e 	bl	8003c64 <_malloc_r>
 8003d48:	4605      	mov	r5, r0
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d0f2      	beq.n	8003d34 <_realloc_r+0x1c>
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4622      	mov	r2, r4
 8003d52:	f7ff ff13 	bl	8003b7c <memcpy>
 8003d56:	4631      	mov	r1, r6
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f7ff ff37 	bl	8003bcc <_free_r>
 8003d5e:	e7e9      	b.n	8003d34 <_realloc_r+0x1c>
 8003d60:	4635      	mov	r5, r6
 8003d62:	e7e7      	b.n	8003d34 <_realloc_r+0x1c>

08003d64 <_sbrk_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	2300      	movs	r3, #0
 8003d68:	4d05      	ldr	r5, [pc, #20]	; (8003d80 <_sbrk_r+0x1c>)
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	f7fd f8b6 	bl	8000ee0 <_sbrk>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d102      	bne.n	8003d7e <_sbrk_r+0x1a>
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	b103      	cbz	r3, 8003d7e <_sbrk_r+0x1a>
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	2000013c 	.word	0x2000013c

08003d84 <__malloc_lock>:
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <__malloc_lock+0x8>)
 8003d86:	f000 b811 	b.w	8003dac <__retarget_lock_acquire_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	20000144 	.word	0x20000144

08003d90 <__malloc_unlock>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__malloc_unlock+0x8>)
 8003d92:	f000 b80c 	b.w	8003dae <__retarget_lock_release_recursive>
 8003d96:	bf00      	nop
 8003d98:	20000144 	.word	0x20000144

08003d9c <_malloc_usable_size_r>:
 8003d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003da0:	1f18      	subs	r0, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfbc      	itt	lt
 8003da6:	580b      	ldrlt	r3, [r1, r0]
 8003da8:	18c0      	addlt	r0, r0, r3
 8003daa:	4770      	bx	lr

08003dac <__retarget_lock_acquire_recursive>:
 8003dac:	4770      	bx	lr

08003dae <__retarget_lock_release_recursive>:
 8003dae:	4770      	bx	lr

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
