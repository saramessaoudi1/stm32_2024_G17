
lora_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001894  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080019d0  080019d0  000119d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a10  08001a10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a10  08001a10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a10  08001a10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a10  08001a10  00011a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a14  08001a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  2000000c  08001a24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08001a24  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076a9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b8  00000000  00000000  000276de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00028b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  000291d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014973  00000000  00000000  00029790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bcb  00000000  00000000  0003e103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080a48  00000000  00000000  00046cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001790  00000000  00000000  000c776c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080019b8 	.word	0x080019b8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080019b8 	.word	0x080019b8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b08a      	sub	sp, #40	; 0x28
 8000190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	f107 0314 	add.w	r3, r7, #20
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001a2:	4b2a      	ldr	r3, [pc, #168]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a4:	69db      	ldr	r3, [r3, #28]
 80001a6:	4a29      	ldr	r2, [pc, #164]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	61d3      	str	r3, [r2, #28]
 80001ae:	4b27      	ldr	r3, [pc, #156]	; (800024c <MX_GPIO_Init+0xc0>)
 80001b0:	69db      	ldr	r3, [r3, #28]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	613b      	str	r3, [r7, #16]
 80001b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001ba:	4b24      	ldr	r3, [pc, #144]	; (800024c <MX_GPIO_Init+0xc0>)
 80001bc:	69db      	ldr	r3, [r3, #28]
 80001be:	4a23      	ldr	r2, [pc, #140]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c0:	f043 0320 	orr.w	r3, r3, #32
 80001c4:	61d3      	str	r3, [r2, #28]
 80001c6:	4b21      	ldr	r3, [pc, #132]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c8:	69db      	ldr	r3, [r3, #28]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	4b1e      	ldr	r3, [pc, #120]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d4:	69db      	ldr	r3, [r3, #28]
 80001d6:	4a1d      	ldr	r2, [pc, #116]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	61d3      	str	r3, [r2, #28]
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <MX_GPIO_Init+0xc0>)
 80001e0:	69db      	ldr	r3, [r3, #28]
 80001e2:	f003 0301 	and.w	r3, r3, #1
 80001e6:	60bb      	str	r3, [r7, #8]
 80001e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <MX_GPIO_Init+0xc0>)
 80001ec:	69db      	ldr	r3, [r3, #28]
 80001ee:	4a17      	ldr	r2, [pc, #92]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f0:	f043 0302 	orr.w	r3, r3, #2
 80001f4:	61d3      	str	r3, [r2, #28]
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f8:	69db      	ldr	r3, [r3, #28]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	4812      	ldr	r0, [pc, #72]	; (8000250 <MX_GPIO_Init+0xc4>)
 8000208:	f000 fd18 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800020c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000212:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	4619      	mov	r1, r3
 8000222:	480c      	ldr	r0, [pc, #48]	; (8000254 <MX_GPIO_Init+0xc8>)
 8000224:	f000 fb7a 	bl	800091c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000228:	2320      	movs	r3, #32
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022c:	2301      	movs	r3, #1
 800022e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4619      	mov	r1, r3
 800023e:	4804      	ldr	r0, [pc, #16]	; (8000250 <MX_GPIO_Init+0xc4>)
 8000240:	f000 fb6c 	bl	800091c <HAL_GPIO_Init>

}
 8000244:	bf00      	nop
 8000246:	3728      	adds	r7, #40	; 0x28
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	40020000 	.word	0x40020000
 8000254:	40020800 	.word	0x40020800

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b5b0      	push	{r4, r5, r7, lr}
 800025a:	b08c      	sub	sp, #48	; 0x30
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 fa0a 	bl	8000676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f885 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f7ff ff91 	bl	800018c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800026a:	f000 f941 	bl	80004f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800026e:	f000 f915 	bl	800049c <MX_USART1_UART_Init>
     HAL_UART_Receive(&huart1, (uint8_t*)receivedData, sizeof(receivedData), 1000);

*/

  // Transmit command at to LoRa module
         char dataToSend[] = "AT\r"; // Tableau d'octets Ã  envoyer
 8000272:	4b39      	ldr	r3, [pc, #228]	; (8000358 <main+0x100>)
 8000274:	62fb      	str	r3, [r7, #44]	; 0x2c

  	   	  HAL_UART_Transmit(&huart1, (uint8_t*)dataToSend, strlen(dataToSend), 1000);
 8000276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff7e 	bl	800017c <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	4833      	ldr	r0, [pc, #204]	; (800035c <main+0x104>)
 800028e:	f001 f8ff 	bl	8001490 <HAL_UART_Transmit>
  	  // Attente de la rÃ©ponse Ã  la premiÃ¨re commande
  	     HAL_UART_Receive(&huart1, (uint8_t*)receivedData, sizeof(receivedData), 1000);
 8000292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800029a:	4931      	ldr	r1, [pc, #196]	; (8000360 <main+0x108>)
 800029c:	482f      	ldr	r0, [pc, #188]	; (800035c <main+0x104>)
 800029e:	f001 f97a 	bl	8001596 <HAL_UART_Receive>

  	     // Transmission de la rÃ©ponse reÃ§ue Ã  une autre UART (si nÃ©cessaire)
  	     HAL_UART_Transmit(&huart2, (uint8_t*)receivedData, strlen(receivedData), 1000);
 80002a2:	482f      	ldr	r0, [pc, #188]	; (8000360 <main+0x108>)
 80002a4:	f7ff ff6a 	bl	800017c <strlen>
 80002a8:	4603      	mov	r3, r0
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b0:	492b      	ldr	r1, [pc, #172]	; (8000360 <main+0x108>)
 80002b2:	482c      	ldr	r0, [pc, #176]	; (8000364 <main+0x10c>)
 80002b4:	f001 f8ec 	bl	8001490 <HAL_UART_Transmit>
  	   // Transmission de la rÃ©ponse reÃ§ue Ã  une autre UART (si nÃ©cessaire)
  	     HAL_UART_Transmit(&huart2, (uint8_t*)receivedData, strlen(receivedData), 1000);
*/

  	   // Envoi de la 3Ã¨me commande "AT+MODE"
  	    char thirdCommand[] = "AT+MODE=TEST\r";
 80002b8:	4b2b      	ldr	r3, [pc, #172]	; (8000368 <main+0x110>)
 80002ba:	f107 041c 	add.w	r4, r7, #28
 80002be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c0:	c407      	stmia	r4!, {r0, r1, r2}
 80002c2:	8023      	strh	r3, [r4, #0]
  	    HAL_UART_Transmit(&huart1, (uint8_t*)thirdCommand, strlen(thirdCommand), 1000);
 80002c4:	f107 031c 	add.w	r3, r7, #28
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff57 	bl	800017c <strlen>
 80002ce:	4603      	mov	r3, r0
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	f107 011c 	add.w	r1, r7, #28
 80002d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002da:	4820      	ldr	r0, [pc, #128]	; (800035c <main+0x104>)
 80002dc:	f001 f8d8 	bl	8001490 <HAL_UART_Transmit>

  	    // Attente de la rÃ©ponse Ã  la 3iÃ¨me commande (si nÃ©cessaire)
  	    HAL_UART_Receive(&huart1, (uint8_t*)receivedData, sizeof(receivedData), 1000);
 80002e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e8:	491d      	ldr	r1, [pc, #116]	; (8000360 <main+0x108>)
 80002ea:	481c      	ldr	r0, [pc, #112]	; (800035c <main+0x104>)
 80002ec:	f001 f953 	bl	8001596 <HAL_UART_Receive>
  	    // Transmission de la rÃ©ponse reÃ§ue Ã  une autre UART (si nÃ©cessaire)
  	    HAL_UART_Transmit(&huart2, (uint8_t*)receivedData, strlen(receivedData), 1000);
 80002f0:	481b      	ldr	r0, [pc, #108]	; (8000360 <main+0x108>)
 80002f2:	f7ff ff43 	bl	800017c <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fe:	4918      	ldr	r1, [pc, #96]	; (8000360 <main+0x108>)
 8000300:	4818      	ldr	r0, [pc, #96]	; (8000364 <main+0x10c>)
 8000302:	f001 f8c5 	bl	8001490 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Envoi de la commande  AT+TEST=TXLRSTR (ascii) pour envoyer un message
	 //                        AT+TEST=TXLRPKT (hexa)
	    	  char sendCommand[] = "AT+TEST=TXLRPKT AC1234\r";
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <main+0x114>)
 8000308:	1d3c      	adds	r4, r7, #4
 800030a:	461d      	mov	r5, r3
 800030c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000310:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000314:	e884 0003 	stmia.w	r4, {r0, r1}
	    	  HAL_UART_Transmit(&huart1, (uint8_t*)sendCommand, strlen(sendCommand), 1000);
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff2e 	bl	800017c <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	b29a      	uxth	r2, r3
 8000324:	1d39      	adds	r1, r7, #4
 8000326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <main+0x104>)
 800032c:	f001 f8b0 	bl	8001490 <HAL_UART_Transmit>

	    	  // Attente de la rÃ©ponse Ã  la 5Ã¨me commande (si nÃ©cessaire)
	    	  HAL_UART_Receive(&huart1, (uint8_t*)receivedData, sizeof(receivedData), 1000);
 8000330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000338:	4909      	ldr	r1, [pc, #36]	; (8000360 <main+0x108>)
 800033a:	4808      	ldr	r0, [pc, #32]	; (800035c <main+0x104>)
 800033c:	f001 f92b 	bl	8001596 <HAL_UART_Receive>
	    	  // Transmission de la rÃ©ponse reÃ§ue Ã  une autre UART (si nÃ©cessaire)
	    	  HAL_UART_Transmit(&huart2, (uint8_t*)receivedData, strlen(receivedData), 1000);
 8000340:	4807      	ldr	r0, [pc, #28]	; (8000360 <main+0x108>)
 8000342:	f7ff ff1b 	bl	800017c <strlen>
 8000346:	4603      	mov	r3, r0
 8000348:	b29a      	uxth	r2, r3
 800034a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034e:	4904      	ldr	r1, [pc, #16]	; (8000360 <main+0x108>)
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <main+0x10c>)
 8000352:	f001 f89d 	bl	8001490 <HAL_UART_Transmit>
  {
 8000356:	e7d6      	b.n	8000306 <main+0xae>
 8000358:	000d5441 	.word	0x000d5441
 800035c:	20000410 	.word	0x20000410
 8000360:	20000028 	.word	0x20000028
 8000364:	20000458 	.word	0x20000458
 8000368:	080019d0 	.word	0x080019d0
 800036c:	080019e0 	.word	0x080019e0

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b092      	sub	sp, #72	; 0x48
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0314 	add.w	r3, r7, #20
 800037a:	2234      	movs	r2, #52	; 0x34
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fb12 	bl	80019a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	463b      	mov	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
  }*/

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000392:	2302      	movs	r3, #2
 8000394:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039a:	2310      	movs	r3, #16
 800039c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a2:	2300      	movs	r3, #0
 80003a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 /* RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;*/
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fc5e 	bl	8000c6c <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80003b6:	f000 f80e 	bl	80003d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2303      	movs	r3, #3
 80003c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]

 /* if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }*/
}
 80003ce:	bf00      	nop
 80003d0:	3748      	adds	r7, #72	; 0x48
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003da:	b672      	cpsid	i
}
 80003dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003de:	e7fe      	b.n	80003de <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_MspInit+0x5c>)
 80003e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ea:	4a14      	ldr	r2, [pc, #80]	; (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x5c>)
 80003f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x5c>)
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6213      	str	r3, [r2, #32]
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x5c>)
 800040c:	6a1b      	ldr	r3, [r3, #32]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <HAL_MspInit+0x5c>)
 8000418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041a:	4a08      	ldr	r2, [pc, #32]	; (800043c <HAL_MspInit+0x5c>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000420:	6253      	str	r3, [r2, #36]	; 0x24
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <HAL_MspInit+0x5c>)
 8000424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800042e:	2007      	movs	r0, #7
 8000430:	f000 fa40 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40023800 	.word	0x40023800

08000440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <NMI_Handler+0x4>

08000446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <HardFault_Handler+0x4>

0800044c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <MemManage_Handler+0x4>

08000452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <UsageFault_Handler+0x4>

0800045e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000486:	f000 f949 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}

0800048e <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
	...

0800049c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_USART1_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_USART1_UART_Init+0x4c>)
 80004d4:	f000 ff8c 	bl	80013f0 <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f7ff ff7a 	bl	80003d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000410 	.word	0x20000410
 80004ec:	40013800 	.word	0x40013800

080004f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x4c>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_USART2_UART_Init+0x50>)
 80004f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_USART2_UART_Init+0x4c>)
 80004fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000528:	f000 ff62 	bl	80013f0 <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000532:	f7ff ff50 	bl	80003d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000458 	.word	0x20000458
 8000540:	40004400 	.word	0x40004400

08000544 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	; 0x30
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a2e      	ldr	r2, [pc, #184]	; (800061c <HAL_UART_MspInit+0xd8>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d129      	bne.n	80005ba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000566:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <HAL_UART_MspInit+0xdc>)
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <HAL_UART_MspInit+0xdc>)
 800056c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000570:	6213      	str	r3, [r2, #32]
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <HAL_UART_MspInit+0xdc>)
 8000574:	6a1b      	ldr	r3, [r3, #32]
 8000576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057a:	61bb      	str	r3, [r7, #24]
 800057c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <HAL_UART_MspInit+0xdc>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a27      	ldr	r2, [pc, #156]	; (8000620 <HAL_UART_MspInit+0xdc>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <HAL_UART_MspInit+0xdc>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000596:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005a8:	2307      	movs	r3, #7
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	481c      	ldr	r0, [pc, #112]	; (8000624 <HAL_UART_MspInit+0xe0>)
 80005b4:	f000 f9b2 	bl	800091c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80005b8:	e02c      	b.n	8000614 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <HAL_UART_MspInit+0xe4>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d127      	bne.n	8000614 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_UART_MspInit+0xdc>)
 80005c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c8:	4a15      	ldr	r2, [pc, #84]	; (8000620 <HAL_UART_MspInit+0xdc>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ce:	6253      	str	r3, [r2, #36]	; 0x24
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_UART_MspInit+0xdc>)
 80005d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_UART_MspInit+0xdc>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <HAL_UART_MspInit+0xdc>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	61d3      	str	r3, [r2, #28]
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_UART_MspInit+0xdc>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005f4:	230c      	movs	r3, #12
 80005f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000604:	2307      	movs	r3, #7
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <HAL_UART_MspInit+0xe0>)
 8000610:	f000 f984 	bl	800091c <HAL_GPIO_Init>
}
 8000614:	bf00      	nop
 8000616:	3730      	adds	r7, #48	; 0x30
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40013800 	.word	0x40013800
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	40004400 	.word	0x40004400

0800062c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800062c:	f7ff ff2f 	bl	800048e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000632:	490c      	ldr	r1, [pc, #48]	; (8000664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000648:	4c09      	ldr	r4, [pc, #36]	; (8000670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000656:	f001 f983 	bl	8001960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fdfd 	bl	8000258 <main>
  bx lr
 800065e:	4770      	bx	lr
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000668:	08001a18 	.word	0x08001a18
  ldr r2, =_sbss
 800066c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000670:	200004a4 	.word	0x200004a4

08000674 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_IRQHandler>

08000676 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 f917 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f80e 	bl	80006a8 <HAL_InitTick>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e001      	b.n	800069c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000698:	f7ff fea2 	bl	80003e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_InitTick+0x68>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d022      	beq.n	8000702 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_InitTick+0x6c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_InitTick+0x68>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f916 	bl	8000902 <HAL_SYSTICK_Config>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d809      	bhi.n	80006f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e2:	2200      	movs	r2, #0
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ea:	f000 f8ee 	bl	80008ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <HAL_InitTick+0x70>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	e007      	b.n	8000706 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e004      	b.n	8000706 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e001      	b.n	8000706 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000008 	.word	0x20000008
 8000714:	20000000 	.word	0x20000000
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4413      	add	r3, r2
 800072a:	4a03      	ldr	r2, [pc, #12]	; (8000738 <HAL_IncTick+0x1c>)
 800072c:	6013      	str	r3, [r2, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	200004a0 	.word	0x200004a0
 800073c:	20000008 	.word	0x20000008

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	200004a0 	.word	0x200004a0

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff90 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff49 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff5e 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffb0 	bl	8000870 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000932:	e160      	b.n	8000bf6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	2101      	movs	r1, #1
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 8152 	beq.w	8000bf0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f003 0303 	and.w	r3, r3, #3
 8000954:	2b01      	cmp	r3, #1
 8000956:	d005      	beq.n	8000964 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000960:	2b02      	cmp	r3, #2
 8000962:	d130      	bne.n	80009c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68da      	ldr	r2, [r3, #12]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4313      	orrs	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800099a:	2201      	movs	r2, #1
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	091b      	lsrs	r3, r3, #4
 80009b0:	f003 0201 	and.w	r2, r3, #1
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d017      	beq.n	8000a02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	2203      	movs	r2, #3
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d123      	bne.n	8000a56 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	08da      	lsrs	r2, r3, #3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3208      	adds	r2, #8
 8000a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	220f      	movs	r2, #15
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	691a      	ldr	r2, [r3, #16]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	08da      	lsrs	r2, r3, #3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3208      	adds	r2, #8
 8000a50:	6939      	ldr	r1, [r7, #16]
 8000a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2203      	movs	r2, #3
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 0203 	and.w	r2, r3, #3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 80ac 	beq.w	8000bf0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a98:	4b5e      	ldr	r3, [pc, #376]	; (8000c14 <HAL_GPIO_Init+0x2f8>)
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	4a5d      	ldr	r2, [pc, #372]	; (8000c14 <HAL_GPIO_Init+0x2f8>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6213      	str	r3, [r2, #32]
 8000aa4:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <HAL_GPIO_Init+0x2f8>)
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ab0:	4a59      	ldr	r2, [pc, #356]	; (8000c18 <HAL_GPIO_Init+0x2fc>)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a51      	ldr	r2, [pc, #324]	; (8000c1c <HAL_GPIO_Init+0x300>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d025      	beq.n	8000b28 <HAL_GPIO_Init+0x20c>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a50      	ldr	r2, [pc, #320]	; (8000c20 <HAL_GPIO_Init+0x304>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d01f      	beq.n	8000b24 <HAL_GPIO_Init+0x208>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a4f      	ldr	r2, [pc, #316]	; (8000c24 <HAL_GPIO_Init+0x308>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d019      	beq.n	8000b20 <HAL_GPIO_Init+0x204>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a4e      	ldr	r2, [pc, #312]	; (8000c28 <HAL_GPIO_Init+0x30c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d013      	beq.n	8000b1c <HAL_GPIO_Init+0x200>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a4d      	ldr	r2, [pc, #308]	; (8000c2c <HAL_GPIO_Init+0x310>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d00d      	beq.n	8000b18 <HAL_GPIO_Init+0x1fc>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a4c      	ldr	r2, [pc, #304]	; (8000c30 <HAL_GPIO_Init+0x314>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d007      	beq.n	8000b14 <HAL_GPIO_Init+0x1f8>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <HAL_GPIO_Init+0x318>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d101      	bne.n	8000b10 <HAL_GPIO_Init+0x1f4>
 8000b0c:	2306      	movs	r3, #6
 8000b0e:	e00c      	b.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b10:	2307      	movs	r3, #7
 8000b12:	e00a      	b.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b14:	2305      	movs	r3, #5
 8000b16:	e008      	b.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e004      	b.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e002      	b.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	f002 0203 	and.w	r2, r2, #3
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	4093      	lsls	r3, r2
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b3a:	4937      	ldr	r1, [pc, #220]	; (8000c18 <HAL_GPIO_Init+0x2fc>)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b48:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b6c:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b72:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f47f ae97 	bne.w	8000934 <HAL_GPIO_Init+0x18>
  }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40020800 	.word	0x40020800
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40021400 	.word	0x40021400
 8000c34:	40021800 	.word	0x40021800
 8000c38:	40010400 	.word	0x40010400

08000c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	807b      	strh	r3, [r7, #2]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c4c:	787b      	ldrb	r3, [r7, #1]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000c58:	e003      	b.n	8000c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	041a      	lsls	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	619a      	str	r2, [r3, #24]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e31d      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c7e:	4b94      	ldr	r3, [pc, #592]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c88:	4b91      	ldr	r3, [pc, #580]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c90:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d07b      	beq.n	8000d96 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d006      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2b0c      	cmp	r3, #12
 8000ca8:	d10f      	bne.n	8000cca <HAL_RCC_OscConfig+0x5e>
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb0:	d10b      	bne.n	8000cca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb2:	4b87      	ldr	r3, [pc, #540]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d06a      	beq.n	8000d94 <HAL_RCC_OscConfig+0x128>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d166      	bne.n	8000d94 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e2f7      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d106      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x74>
 8000cd2:	4b7f      	ldr	r3, [pc, #508]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a7e      	ldr	r2, [pc, #504]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e02d      	b.n	8000d3c <HAL_RCC_OscConfig+0xd0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10c      	bne.n	8000d02 <HAL_RCC_OscConfig+0x96>
 8000ce8:	4b79      	ldr	r3, [pc, #484]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a78      	ldr	r2, [pc, #480]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b76      	ldr	r3, [pc, #472]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a75      	ldr	r2, [pc, #468]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e01c      	b.n	8000d3c <HAL_RCC_OscConfig+0xd0>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d10c      	bne.n	8000d24 <HAL_RCC_OscConfig+0xb8>
 8000d0a:	4b71      	ldr	r3, [pc, #452]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a70      	ldr	r2, [pc, #448]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	4b6e      	ldr	r3, [pc, #440]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a6d      	ldr	r2, [pc, #436]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e00b      	b.n	8000d3c <HAL_RCC_OscConfig+0xd0>
 8000d24:	4b6a      	ldr	r3, [pc, #424]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a69      	ldr	r2, [pc, #420]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a66      	ldr	r2, [pc, #408]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d013      	beq.n	8000d6c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fcfc 	bl	8000740 <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fcf8 	bl	8000740 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e2ad      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f0      	beq.n	8000d4c <HAL_RCC_OscConfig+0xe0>
 8000d6a:	e014      	b.n	8000d96 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fce8 	bl	8000740 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d74:	f7ff fce4 	bl	8000740 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b64      	cmp	r3, #100	; 0x64
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e299      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d86:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x108>
 8000d92:	e000      	b.n	8000d96 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d05a      	beq.n	8000e58 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d005      	beq.n	8000db4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	d119      	bne.n	8000de2 <HAL_RCC_OscConfig+0x176>
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d116      	bne.n	8000de2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <HAL_RCC_OscConfig+0x160>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d001      	beq.n	8000dcc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e276      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dcc:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	493d      	ldr	r1, [pc, #244]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de0:	e03a      	b.n	8000e58 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d020      	beq.n	8000e2c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dea:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <HAL_RCC_OscConfig+0x268>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fca6 	bl	8000740 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df8:	f7ff fca2 	bl	8000740 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e257      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e0a:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	492a      	ldr	r1, [pc, #168]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
 8000e2a:	e015      	b.n	8000e58 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <HAL_RCC_OscConfig+0x268>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e32:	f7ff fc85 	bl	8000740 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fc81 	bl	8000740 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e236      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f0      	bne.n	8000e3a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80b8 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d170      	bne.n	8000f4e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <HAL_RCC_OscConfig+0x218>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e21a      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1a      	ldr	r2, [r3, #32]
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d921      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fa49 	bl	8001330 <RCC_SetFlashLatencyFromMSIRange>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e208      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	061b      	lsls	r3, r3, #24
 8000ec8:	4901      	ldr	r1, [pc, #4]	; (8000ed0 <HAL_RCC_OscConfig+0x264>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
 8000ece:	e020      	b.n	8000f12 <HAL_RCC_OscConfig+0x2a6>
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed8:	4ba4      	ldr	r3, [pc, #656]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	49a1      	ldr	r1, [pc, #644]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eea:	4ba0      	ldr	r3, [pc, #640]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	061b      	lsls	r3, r3, #24
 8000ef8:	499c      	ldr	r1, [pc, #624]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fa14 	bl	8001330 <RCC_SetFlashLatencyFromMSIRange>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e1d3      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	0b5b      	lsrs	r3, r3, #13
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f22:	4a92      	ldr	r2, [pc, #584]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000f24:	6892      	ldr	r2, [r2, #8]
 8000f26:	0912      	lsrs	r2, r2, #4
 8000f28:	f002 020f 	and.w	r2, r2, #15
 8000f2c:	4990      	ldr	r1, [pc, #576]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f2e:	5c8a      	ldrb	r2, [r1, r2]
 8000f30:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f32:	4a90      	ldr	r2, [pc, #576]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 8000f34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f36:	4b90      	ldr	r3, [pc, #576]	; (8001178 <HAL_RCC_OscConfig+0x50c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fbb4 	bl	80006a8 <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d045      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	e1b5      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d029      	beq.n	8000faa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f56:	4b89      	ldr	r3, [pc, #548]	; (800117c <HAL_RCC_OscConfig+0x510>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fbf0 	bl	8000740 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f64:	f7ff fbec 	bl	8000740 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e1a1      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f76:	4b7d      	ldr	r3, [pc, #500]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f82:	4b7a      	ldr	r3, [pc, #488]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4977      	ldr	r1, [pc, #476]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f94:	4b75      	ldr	r3, [pc, #468]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	4972      	ldr	r1, [pc, #456]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
 8000fa8:	e015      	b.n	8000fd6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000faa:	4b74      	ldr	r3, [pc, #464]	; (800117c <HAL_RCC_OscConfig+0x510>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fbc6 	bl	8000740 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fbc2 	bl	8000740 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e177      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fca:	4b68      	ldr	r3, [pc, #416]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d030      	beq.n	8001044 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d016      	beq.n	8001018 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <HAL_RCC_OscConfig+0x514>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fba6 	bl	8000740 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fba2 	bl	8000740 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e157      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800100a:	4b58      	ldr	r3, [pc, #352]	; (800116c <HAL_RCC_OscConfig+0x500>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x38c>
 8001016:	e015      	b.n	8001044 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001018:	4b59      	ldr	r3, [pc, #356]	; (8001180 <HAL_RCC_OscConfig+0x514>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101e:	f7ff fb8f 	bl	8000740 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001026:	f7ff fb8b 	bl	8000740 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e140      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <HAL_RCC_OscConfig+0x500>)
 800103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b5 	beq.w	80011bc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001056:	4b45      	ldr	r3, [pc, #276]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10d      	bne.n	800107e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	4a41      	ldr	r2, [pc, #260]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	6253      	str	r3, [r2, #36]	; 0x24
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800107a:	2301      	movs	r3, #1
 800107c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <HAL_RCC_OscConfig+0x518>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	2b00      	cmp	r3, #0
 8001088:	d118      	bne.n	80010bc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800108a:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <HAL_RCC_OscConfig+0x518>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a3d      	ldr	r2, [pc, #244]	; (8001184 <HAL_RCC_OscConfig+0x518>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001096:	f7ff fb53 	bl	8000740 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109e:	f7ff fb4f 	bl	8000740 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e104      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_RCC_OscConfig+0x518>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x466>
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <HAL_RCC_OscConfig+0x500>)
 80010c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c8:	4a28      	ldr	r2, [pc, #160]	; (800116c <HAL_RCC_OscConfig+0x500>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
 80010d0:	e02d      	b.n	800112e <HAL_RCC_OscConfig+0x4c2>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x488>
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <HAL_RCC_OscConfig+0x500>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_RCC_OscConfig+0x500>)
 80010e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e4:	6353      	str	r3, [r2, #52]	; 0x34
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_RCC_OscConfig+0x500>)
 80010e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_RCC_OscConfig+0x500>)
 80010ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010f0:	6353      	str	r3, [r2, #52]	; 0x34
 80010f2:	e01c      	b.n	800112e <HAL_RCC_OscConfig+0x4c2>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d10c      	bne.n	8001116 <HAL_RCC_OscConfig+0x4aa>
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_RCC_OscConfig+0x500>)
 80010fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001100:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6353      	str	r3, [r2, #52]	; 0x34
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_RCC_OscConfig+0x500>)
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_RCC_OscConfig+0x500>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6353      	str	r3, [r2, #52]	; 0x34
 8001114:	e00b      	b.n	800112e <HAL_RCC_OscConfig+0x4c2>
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111a:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_RCC_OscConfig+0x500>)
 800111c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001120:	6353      	str	r3, [r2, #52]	; 0x34
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800112c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d015      	beq.n	8001162 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fb03 	bl	8000740 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff faff 	bl	8000740 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	; 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e0b2      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_RCC_OscConfig+0x500>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ee      	beq.n	800113e <HAL_RCC_OscConfig+0x4d2>
 8001160:	e023      	b.n	80011aa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff faed 	bl	8000740 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001168:	e019      	b.n	800119e <HAL_RCC_OscConfig+0x532>
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	080019f8 	.word	0x080019f8
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004
 800117c:	42470020 	.word	0x42470020
 8001180:	42470680 	.word	0x42470680
 8001184:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001188:	f7ff fada 	bl	8000740 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e08d      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 80011a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1ee      	bne.n	8001188 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011aa:	7ffb      	ldrb	r3, [r7, #31]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b0:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	4a43      	ldr	r2, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 80011b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d079      	beq.n	80012b8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d056      	beq.n	8001278 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d13b      	bne.n	800124a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <HAL_RCC_OscConfig+0x65c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fab2 	bl	8000740 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff faae 	bl	8000740 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e063      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	4319      	orrs	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	430b      	orrs	r3, r1
 8001216:	492b      	ldr	r1, [pc, #172]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 8001218:	4313      	orrs	r3, r2
 800121a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_RCC_OscConfig+0x65c>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fa8d 	bl	8000740 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122a:	f7ff fa89 	bl	8000740 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e03e      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x5be>
 8001248:	e036      	b.n	80012b8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_RCC_OscConfig+0x65c>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fa76 	bl	8000740 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff fa72 	bl	8000740 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e027      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x5ec>
 8001276:	e01f      	b.n	80012b8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e01a      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_RCC_OscConfig+0x658>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	429a      	cmp	r2, r3
 8001296:	d10d      	bne.n	80012b4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	42470060 	.word	0x42470060

080012cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_RCC_GetHCLKFreq+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000000 	.word	0x20000000

080012e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012e4:	f7ff fff2 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	4903      	ldr	r1, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012f6:	5ccb      	ldrb	r3, [r1, r3]
 80012f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	08001a08 	.word	0x08001a08

08001308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800130c:	f7ff ffde 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	0adb      	lsrs	r3, r3, #11
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <HAL_RCC_GetPCLK2Freq+0x24>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	08001a08 	.word	0x08001a08

08001330 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d12c      	bne.n	80013a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e016      	b.n	800138e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136a:	6253      	str	r3, [r2, #36]	; 0x24
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001380:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800138c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001394:	d105      	bne.n	80013a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800139c:	d101      	bne.n	80013a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800139e:	2301      	movs	r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 0201 	bic.w	r2, r3, #1
 80013bc:	490b      	ldr	r1, [pc, #44]	; (80013ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d001      	beq.n	80013d6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e042      	b.n	8001488 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff f894 	bl	8000544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f9af 	bl	8001798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2220      	movs	r2, #32
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	d16d      	bne.n	800158c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_UART_Transmit+0x2c>
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e066      	b.n	800158e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2221      	movs	r2, #33	; 0x21
 80014ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014ce:	f7ff f937 	bl	8000740 <HAL_GetTick>
 80014d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	88fa      	ldrh	r2, [r7, #6]
 80014de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e8:	d108      	bne.n	80014fc <HAL_UART_Transmit+0x6c>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d104      	bne.n	80014fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	e003      	b.n	8001504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001504:	e02a      	b.n	800155c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2200      	movs	r2, #0
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 f8d2 	bl	80016ba <UART_WaitOnFlagUntilTimeout>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e036      	b.n	800158e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10b      	bne.n	800153e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	3302      	adds	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	e007      	b.n	800154e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3301      	adds	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1cf      	bne.n	8001506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f8a2 	bl	80016ba <UART_WaitOnFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e006      	b.n	800158e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	e000      	b.n	800158e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800158c:	2302      	movs	r3, #2
  }
}
 800158e:	4618      	mov	r0, r3
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b08a      	sub	sp, #40	; 0x28
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4613      	mov	r3, r2
 80015a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b20      	cmp	r3, #32
 80015b4:	d17c      	bne.n	80016b0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HAL_UART_Receive+0x2c>
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e075      	b.n	80016b2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2222      	movs	r2, #34	; 0x22
 80015d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015da:	f7ff f8b1 	bl	8000740 <HAL_GetTick>
 80015de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	88fa      	ldrh	r2, [r7, #6]
 80015ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f4:	d108      	bne.n	8001608 <HAL_UART_Receive+0x72>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d104      	bne.n	8001608 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	e003      	b.n	8001610 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001610:	e043      	b.n	800169a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2200      	movs	r2, #0
 800161a:	2120      	movs	r1, #32
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f84c 	bl	80016ba <UART_WaitOnFlagUntilTimeout>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e042      	b.n	80016b2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	b29b      	uxth	r3, r3
 800163a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163e:	b29a      	uxth	r2, r3
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	3302      	adds	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	e01f      	b.n	800168c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001654:	d007      	beq.n	8001666 <HAL_UART_Receive+0xd0>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10a      	bne.n	8001674 <HAL_UART_Receive+0xde>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e008      	b.n	8001686 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001680:	b2da      	uxtb	r2, r3
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001690:	b29b      	uxth	r3, r3
 8001692:	3b01      	subs	r3, #1
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1b6      	bne.n	8001612 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e000      	b.n	80016b2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80016b0:	2302      	movs	r3, #2
  }
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b090      	sub	sp, #64	; 0x40
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016ca:	e050      	b.n	800176e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d04c      	beq.n	800176e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <UART_WaitOnFlagUntilTimeout+0x30>
 80016da:	f7ff f831 	bl	8000740 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d241      	bcs.n	800176e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	330c      	adds	r3, #12
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f4:	e853 3f00 	ldrex	r3, [r3]
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	330c      	adds	r3, #12
 8001708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800170a:	637a      	str	r2, [r7, #52]	; 0x34
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800170e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001712:	e841 2300 	strex	r3, r2, [r1]
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e5      	bne.n	80016ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3314      	adds	r3, #20
 8001724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	e853 3f00 	ldrex	r3, [r3]
 800172c:	613b      	str	r3, [r7, #16]
   return(result);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3314      	adds	r3, #20
 800173c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800173e:	623a      	str	r2, [r7, #32]
 8001740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001742:	69f9      	ldr	r1, [r7, #28]
 8001744:	6a3a      	ldr	r2, [r7, #32]
 8001746:	e841 2300 	strex	r3, r2, [r1]
 800174a:	61bb      	str	r3, [r7, #24]
   return(result);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1e5      	bne.n	800171e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e00f      	b.n	800178e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4013      	ands	r3, r2
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	429a      	cmp	r2, r3
 800177c:	bf0c      	ite	eq
 800177e:	2301      	moveq	r3, #1
 8001780:	2300      	movne	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	429a      	cmp	r2, r3
 800178a:	d09f      	beq.n	80016cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3740      	adds	r7, #64	; 0x40
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80017d8:	f023 030c 	bic.w	r3, r3, #12
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	430b      	orrs	r3, r1
 80017e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699a      	ldr	r2, [r3, #24]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a55      	ldr	r2, [pc, #340]	; (8001958 <UART_SetConfig+0x1c0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d103      	bne.n	800180e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001806:	f7ff fd7f 	bl	8001308 <HAL_RCC_GetPCLK2Freq>
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	e002      	b.n	8001814 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800180e:	f7ff fd67 	bl	80012e0 <HAL_RCC_GetPCLK1Freq>
 8001812:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800181c:	d14c      	bne.n	80018b8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009a      	lsls	r2, r3, #2
 8001828:	441a      	add	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	4a49      	ldr	r2, [pc, #292]	; (800195c <UART_SetConfig+0x1c4>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	0119      	lsls	r1, r3, #4
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	009a      	lsls	r2, r3, #2
 8001848:	441a      	add	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fbb2 f2f3 	udiv	r2, r2, r3
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <UART_SetConfig+0x1c4>)
 8001856:	fba3 0302 	umull	r0, r3, r3, r2
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2064      	movs	r0, #100	; 0x64
 800185e:	fb00 f303 	mul.w	r3, r0, r3
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	3332      	adds	r3, #50	; 0x32
 8001868:	4a3c      	ldr	r2, [pc, #240]	; (800195c <UART_SetConfig+0x1c4>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001876:	4419      	add	r1, r3
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	441a      	add	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fbb2 f2f3 	udiv	r2, r2, r3
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <UART_SetConfig+0x1c4>)
 8001890:	fba3 0302 	umull	r0, r3, r3, r2
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	fb00 f303 	mul.w	r3, r0, r3
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	3332      	adds	r3, #50	; 0x32
 80018a2:	4a2e      	ldr	r2, [pc, #184]	; (800195c <UART_SetConfig+0x1c4>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	f003 0207 	and.w	r2, r3, #7
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	440a      	add	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80018b6:	e04a      	b.n	800194e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	441a      	add	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4a23      	ldr	r2, [pc, #140]	; (800195c <UART_SetConfig+0x1c4>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	0119      	lsls	r1, r3, #4
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	009a      	lsls	r2, r3, #2
 80018e2:	441a      	add	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <UART_SetConfig+0x1c4>)
 80018f0:	fba3 0302 	umull	r0, r3, r3, r2
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	2064      	movs	r0, #100	; 0x64
 80018f8:	fb00 f303 	mul.w	r3, r0, r3
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	3332      	adds	r3, #50	; 0x32
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <UART_SetConfig+0x1c4>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190e:	4419      	add	r1, r3
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	441a      	add	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	fbb2 f2f3 	udiv	r2, r2, r3
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <UART_SetConfig+0x1c4>)
 8001928:	fba3 0302 	umull	r0, r3, r3, r2
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	2064      	movs	r0, #100	; 0x64
 8001930:	fb00 f303 	mul.w	r3, r0, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	3332      	adds	r3, #50	; 0x32
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <UART_SetConfig+0x1c4>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	f003 020f 	and.w	r2, r3, #15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	440a      	add	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013800 	.word	0x40013800
 800195c:	51eb851f 	.word	0x51eb851f

08001960 <__libc_init_array>:
 8001960:	b570      	push	{r4, r5, r6, lr}
 8001962:	2600      	movs	r6, #0
 8001964:	4d0c      	ldr	r5, [pc, #48]	; (8001998 <__libc_init_array+0x38>)
 8001966:	4c0d      	ldr	r4, [pc, #52]	; (800199c <__libc_init_array+0x3c>)
 8001968:	1b64      	subs	r4, r4, r5
 800196a:	10a4      	asrs	r4, r4, #2
 800196c:	42a6      	cmp	r6, r4
 800196e:	d109      	bne.n	8001984 <__libc_init_array+0x24>
 8001970:	f000 f822 	bl	80019b8 <_init>
 8001974:	2600      	movs	r6, #0
 8001976:	4d0a      	ldr	r5, [pc, #40]	; (80019a0 <__libc_init_array+0x40>)
 8001978:	4c0a      	ldr	r4, [pc, #40]	; (80019a4 <__libc_init_array+0x44>)
 800197a:	1b64      	subs	r4, r4, r5
 800197c:	10a4      	asrs	r4, r4, #2
 800197e:	42a6      	cmp	r6, r4
 8001980:	d105      	bne.n	800198e <__libc_init_array+0x2e>
 8001982:	bd70      	pop	{r4, r5, r6, pc}
 8001984:	f855 3b04 	ldr.w	r3, [r5], #4
 8001988:	4798      	blx	r3
 800198a:	3601      	adds	r6, #1
 800198c:	e7ee      	b.n	800196c <__libc_init_array+0xc>
 800198e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001992:	4798      	blx	r3
 8001994:	3601      	adds	r6, #1
 8001996:	e7f2      	b.n	800197e <__libc_init_array+0x1e>
 8001998:	08001a10 	.word	0x08001a10
 800199c:	08001a10 	.word	0x08001a10
 80019a0:	08001a10 	.word	0x08001a10
 80019a4:	08001a14 	.word	0x08001a14

080019a8 <memset>:
 80019a8:	4603      	mov	r3, r0
 80019aa:	4402      	add	r2, r0
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d100      	bne.n	80019b2 <memset+0xa>
 80019b0:	4770      	bx	lr
 80019b2:	f803 1b01 	strb.w	r1, [r3], #1
 80019b6:	e7f9      	b.n	80019ac <memset+0x4>

080019b8 <_init>:
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ba:	bf00      	nop
 80019bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019be:	bc08      	pop	{r3}
 80019c0:	469e      	mov	lr, r3
 80019c2:	4770      	bx	lr

080019c4 <_fini>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr
